/* tslint:disable */
/* eslint-disable */
/**
 * cloudapi_v2
 * buaa scs cloud api v2
 *
 * The version of the OpenAPI document: 2.0
 * Contact: loheagn@icloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 当学生读取该Model时，assessor为空，表示学生不允许读取是谁评阅了自己的作业
 * @export
 * @interface AssessmentInfoResponse
 */
export interface AssessmentInfoResponse {
    /**
     * 
     * @type {SimpleUser}
     * @memberof AssessmentInfoResponse
     */
    'assessor'?: SimpleUser;
    /**
     * 
     * @type {number}
     * @memberof AssessmentInfoResponse
     */
    'assignmentId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssessmentInfoResponse
     */
    'score'?: number;
    /**
     * 调整后的分数
     * @type {number}
     * @memberof AssessmentInfoResponse
     */
    'adjustedScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssessmentInfoResponse
     */
    'assessedTime'?: number;
    /**
     * 评分理由，没有理由的也要返回空String
     * @type {string}
     * @memberof AssessmentInfoResponse
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface AssignmentListResponse
 */
export interface AssignmentListResponse {
    /**
     * 
     * @type {Array<AssignmentResponse>}
     * @memberof AssignmentListResponse
     */
    'assignments': Array<AssignmentResponse>;
}
/**
 * 
 * @export
 * @interface AssignmentPeerAssessmentResultResponse
 */
export interface AssignmentPeerAssessmentResultResponse {
    /**
     * 
     * @type {number}
     * @memberof AssignmentPeerAssessmentResultResponse
     */
    'id': number;
    /**
     * 互评得到的分数
     * @type {number}
     * @memberof AssignmentPeerAssessmentResultResponse
     */
    'peerScore'?: number;
    /**
     * 教师干预后的分数
     * @type {number}
     * @memberof AssignmentPeerAssessmentResultResponse
     */
    'finalScore'?: number;
    /**
     * 
     * @type {Array<AssessmentInfoResponse>}
     * @memberof AssignmentPeerAssessmentResultResponse
     */
    'peerInfoList': Array<AssessmentInfoResponse>;
}
/**
 * 
 * @export
 * @interface AssignmentRequest
 */
export interface AssignmentRequest {
    /**
     * 
     * @type {string}
     * @memberof AssignmentRequest
     */
    'studentId': string;
}
/**
 * 
 * @export
 * @interface AssignmentResponse
 */
export interface AssignmentResponse {
    /**
     * 
     * @type {number}
     * @memberof AssignmentResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentResponse
     */
    'studentId': string;
    /**
     * 
     * @type {number}
     * @memberof AssignmentResponse
     */
    'expId': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentResponse
     */
    'courseId': number;
    /**
     * 
     * @type {FileResponse}
     * @memberof AssignmentResponse
     */
    'file'?: FileResponse;
    /**
     * 长整型时间戳
     * @type {number}
     * @memberof AssignmentResponse
     */
    'createdAt': number;
    /**
     * 长整型时间戳
     * @type {number}
     * @memberof AssignmentResponse
     */
    'updatedAt': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentResponse
     */
    'peerScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentResponse
     */
    'finalScore'?: number;
    /**
     * 
     * @type {AssignmentReviewResponse}
     * @memberof AssignmentResponse
     */
    'assignmentReview'?: AssignmentReviewResponse;
}
/**
 * 
 * @export
 * @interface AssignmentReviewRequest
 */
export interface AssignmentReviewRequest {
    /**
     * 
     * @type {number}
     * @memberof AssignmentReviewRequest
     */
    'assignmentId': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentReviewRequest
     */
    'fileId': number;
}
/**
 * 
 * @export
 * @interface AssignmentReviewResponse
 */
export interface AssignmentReviewResponse {
    /**
     * 
     * @type {number}
     * @memberof AssignmentReviewResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentReviewResponse
     */
    'assignmentId': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentReviewResponse
     */
    'fileId': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentReviewResponse
     */
    'reviewedAt': number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentReviewResponse
     */
    'reviewerId': string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentReviewResponse
     */
    'reviewerName': string;
}
/**
 * 附带“标准成绩”的Assignment Response
 * @export
 * @interface AssignmentWithStandardScoreResponse
 */
export interface AssignmentWithStandardScoreResponse {
    /**
     * 
     * @type {number}
     * @memberof AssignmentWithStandardScoreResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AssignmentWithStandardScoreResponse
     */
    'studentId': string;
    /**
     * 
     * @type {number}
     * @memberof AssignmentWithStandardScoreResponse
     */
    'expId': number;
    /**
     * 
     * @type {number}
     * @memberof AssignmentWithStandardScoreResponse
     */
    'courseId': number;
    /**
     * 
     * @type {FileResponse}
     * @memberof AssignmentWithStandardScoreResponse
     */
    'file'?: FileResponse;
    /**
     * 长整型时间戳
     * @type {number}
     * @memberof AssignmentWithStandardScoreResponse
     */
    'createdAt': number;
    /**
     * 长整型时间戳
     * @type {number}
     * @memberof AssignmentWithStandardScoreResponse
     */
    'updatedAt': number;
    /**
     * 
     * @type {AssessmentInfoResponse}
     * @memberof AssignmentWithStandardScoreResponse
     */
    'peerInfo'?: AssessmentInfoResponse;
}
/**
 * 
 * @export
 * @interface Authentication
 */
export interface Authentication {
    /**
     * 用户的学工号，小写
     * @type {string}
     * @memberof Authentication
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface CourseResourceResponse
 */
export interface CourseResourceResponse {
    /**
     * 
     * @type {number}
     * @memberof CourseResourceResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof CourseResourceResponse
     */
    'courseId': number;
    /**
     * 
     * @type {FileResponse}
     * @memberof CourseResourceResponse
     */
    'file': FileResponse;
    /**
     * 当该值为0时，表示该资源不是从属某一门实验的资源
     * @type {number}
     * @memberof CourseResourceResponse
     */
    'experimentId': number;
}
/**
 * 
 * @export
 * @interface CourseResponse
 */
export interface CourseResponse {
    /**
     * 
     * @type {number}
     * @memberof CourseResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CourseResponse
     */
    'name': string;
    /**
     * 任课教师姓名
     * @type {string}
     * @memberof CourseResponse
     */
    'teacher': string;
    /**
     * 
     * @type {TermModel}
     * @memberof CourseResponse
     */
    'term': TermModel;
    /**
     * 
     * @type {string}
     * @memberof CourseResponse
     */
    'createTime': string;
    /**
     * 
     * @type {string}
     * @memberof CourseResponse
     */
    'departmentId': string;
    /**
     * 本门课的学生人数
     * @type {number}
     * @memberof CourseResponse
     */
    'studentCnt': number;
}
/**
 * 
 * @export
 * @interface CreateExperimentRequest
 */
export interface CreateExperimentRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateExperimentRequest
     */
    'courseId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateExperimentRequest
     */
    'name': string;
    /**
     * 表示是“实验”还是“作业”
     * @type {boolean}
     * @memberof CreateExperimentRequest
     */
    'type': boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateExperimentRequest
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperimentRequest
     */
    'endTime': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperimentRequest
     */
    'deadline': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperimentRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateExperimentRequest
     */
    'enablePeer': boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateExperimentRequest
     */
    'peerDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperimentRequest
     */
    'peerEndTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperimentRequest
     */
    'peerAppealDeadline'?: string;
}
/**
 * 
 * @export
 * @interface CreatePeerAppealRequest
 */
export interface CreatePeerAppealRequest {
    /**
     * 
     * @type {string}
     * @memberof CreatePeerAppealRequest
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePeerAppealRequest
     */
    'expId': number;
}
/**
 * 
 * @export
 * @interface CreatePeerAssessmentRequest
 */
export interface CreatePeerAssessmentRequest {
    /**
     * 
     * @type {number}
     * @memberof CreatePeerAssessmentRequest
     */
    'assignmentId': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePeerAssessmentRequest
     */
    'score': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePeerAssessmentRequest
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface CreateVmApplyRequest
 */
export interface CreateVmApplyRequest {
    /**
     * 当学生为自己申请一个不与实验相关的虚拟机时，需设置此字段
     * @type {string}
     * @memberof CreateVmApplyRequest
     */
    'studentId'?: string;
    /**
     * 当教师为自己申请一个不与实验相关的虚拟机时，需设置此字段
     * @type {string}
     * @memberof CreateVmApplyRequest
     */
    'teacherId'?: string;
    /**
     * 当教师或助教为实验申请虚拟机时，需要使用此字段，并且，如果设置了此字段，同样要设置 studentIdList 字段，表示具体为哪些学生分配虚拟机
     * @type {number}
     * @memberof CreateVmApplyRequest
     */
    'experimentId'?: number;
    /**
     * 表示具体为哪些学生分配虚拟机。需要与experimentId字段结合使用
     * @type {Array<string>}
     * @memberof CreateVmApplyRequest
     */
    'studentIdList'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CreateVmApplyRequest
     */
    'cpu': number;
    /**
     * MB
     * @type {number}
     * @memberof CreateVmApplyRequest
     */
    'memory': number;
    /**
     * bytes
     * @type {number}
     * @memberof CreateVmApplyRequest
     */
    'diskSize': number;
    /**
     * 创建虚拟机所使用的模板的UUID
     * @type {string}
     * @memberof CreateVmApplyRequest
     */
    'templateUuid': string;
    /**
     * 申请理由
     * @type {string}
     * @memberof CreateVmApplyRequest
     */
    'description': string;
    /**
     * 生成的虚拟机的名称的前缀
     * @type {string}
     * @memberof CreateVmApplyRequest
     */
    'namePrefix': string;
}
/**
 * 
 * @export
 * @interface CreateVmApplyResponse
 */
export interface CreateVmApplyResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateVmApplyResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateVmApplyResponse
     */
    'studentId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateVmApplyResponse
     */
    'teacherId': string;
    /**
     * 
     * @type {number}
     * @memberof CreateVmApplyResponse
     */
    'experimentId': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateVmApplyResponse
     */
    'studentIdList': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CreateVmApplyResponse
     */
    'cpu': number;
    /**
     * MB
     * @type {number}
     * @memberof CreateVmApplyResponse
     */
    'memory': number;
    /**
     * bytes
     * @type {number}
     * @memberof CreateVmApplyResponse
     */
    'diskSize': number;
    /**
     * 创建虚拟机所使用的模板的UUID
     * @type {string}
     * @memberof CreateVmApplyResponse
     */
    'templateUuid': string;
    /**
     * 申请理由
     * @type {string}
     * @memberof CreateVmApplyResponse
     */
    'description': string;
    /**
     * 发起申请时的时间戳
     * @type {number}
     * @memberof CreateVmApplyResponse
     */
    'applyTime': number;
    /**
     * 0，表示还没有被处理 1，表示允许同意申请 2，表示拒绝申请
     * @type {number}
     * @memberof CreateVmApplyResponse
     */
    'status': number;
    /**
     * 管理员处理该申请的时间，时间戳
     * @type {number}
     * @memberof CreateVmApplyResponse
     */
    'handleTime': number;
    /**
     * 预期希望得到的虚拟机个数
     * @type {number}
     * @memberof CreateVmApplyResponse
     */
    'expectedNum': number;
    /**
     * 当前实际的虚拟机个数
     * @type {number}
     * @memberof CreateVmApplyResponse
     */
    'actualNum': number;
    /**
     * 最终生成的虚拟机的名称的前缀
     * @type {string}
     * @memberof CreateVmApplyResponse
     */
    'namePrefix': string;
}
/**
 * 
 * @export
 * @interface DeleteCourseResourcesRequest
 */
export interface DeleteCourseResourcesRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteCourseResourcesRequest
     */
    'idList': Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteProjectProjectIdMembersRequest
 */
export interface DeleteProjectProjectIdMembersRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteProjectProjectIdMembersRequest
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface DeleteVmApplyVms
 */
export interface DeleteVmApplyVms {
    /**
     * 需要删除教师申请的单个虚拟机时设置此字段
     * @type {string}
     * @memberof DeleteVmApplyVms
     */
    'teacherId'?: string;
    /**
     * 需要删除学生申请的单个虚拟机时设置此字段
     * @type {string}
     * @memberof DeleteVmApplyVms
     */
    'studentId'?: string;
    /**
     * 需要删除批量申请的多个虚拟机时设置此字段
     * @type {Array<string>}
     * @memberof DeleteVmApplyVms
     */
    'studentIdList'?: Array<string>;
}
/**
 * 某次实验所分配的虚拟机情况
 * @export
 * @interface ExpVmInfo
 */
export interface ExpVmInfo {
    /**
     * 
     * @type {number}
     * @memberof ExpVmInfo
     */
    'status': number;
    /**
     * 
     * @type {number}
     * @memberof ExpVmInfo
     */
    'applyId': number;
    /**
     * 
     * @type {string}
     * @memberof ExpVmInfo
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExpVmInfo
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof ExpVmInfo
     */
    'cnt': number;
}
/**
 * 
 * @export
 * @interface ExperimentResponse
 */
export interface ExperimentResponse {
    /**
     * 
     * @type {number}
     * @memberof ExperimentResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentResponse
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof ExperimentResponse
     */
    'type': boolean;
    /**
     * 
     * @type {string}
     * @memberof ExperimentResponse
     */
    'detail': string;
    /**
     * 
     * @type {FileResponse}
     * @memberof ExperimentResponse
     */
    'resourceFile'?: FileResponse;
    /**
     * 
     * @type {string}
     * @memberof ExperimentResponse
     */
    'createTime': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentResponse
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentResponse
     */
    'endTime': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentResponse
     */
    'deadline': string;
    /**
     * 
     * @type {boolean}
     * @memberof ExperimentResponse
     */
    'isPeerAssessment': boolean;
    /**
     * 
     * @type {string}
     * @memberof ExperimentResponse
     */
    'peerAssessmentDeadline': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentResponse
     */
    'appealDeadline': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentResponse
     */
    'peerAssessmentRules': string;
    /**
     * 
     * @type {boolean}
     * @memberof ExperimentResponse
     */
    'peerAssessmentStart': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExperimentResponse
     */
    'sentEmail': boolean;
    /**
     * 
     * @type {CourseResponse}
     * @memberof ExperimentResponse
     */
    'course': CourseResponse;
}
/**
 * fileIdList指定只打包哪些文件。当fileIdList不为空时，仅打包list中指定的文件（但此时list中的fileId必须合法，即必须确定是与对应的实体相关联的）；当其为空时，则打包所有相关文件。
 * @export
 * @interface FilePackageRequest
 */
export interface FilePackageRequest {
    /**
     * 
     * @type {string}
     * @memberof FilePackageRequest
     */
    'fileType': string;
    /**
     * 关联的实体ID
     * @type {number}
     * @memberof FilePackageRequest
     */
    'involvedId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof FilePackageRequest
     */
    'fileIdList'?: Array<number>;
}
/**
 * 
 * @export
 * @interface FilePackageResponse
 */
export interface FilePackageResponse {
    /**
     * 
     * @type {string}
     * @memberof FilePackageResponse
     */
    'packageId': string;
    /**
     * 
     * @type {string}
     * @memberof FilePackageResponse
     */
    'packageName': string;
}
/**
 * 
 * @export
 * @interface FileResponse
 */
export interface FileResponse {
    /**
     * 
     * @type {number}
     * @memberof FileResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof FileResponse
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof FileResponse
     */
    'uploadTime': number;
    /**
     * 文件类型，枚举值，可选：Assignment
     * @type {string}
     * @memberof FileResponse
     */
    'fileType': string;
    /**
     * 文件大小，长整型
     * @type {number}
     * @memberof FileResponse
     */
    'fileSize': number;
    /**
     * 
     * @type {string}
     * @memberof FileResponse
     */
    'uploader': string;
    /**
     * 
     * @type {string}
     * @memberof FileResponse
     */
    'owner': string;
    /**
     * 
     * @type {string}
     * @memberof FileResponse
     */
    'downloadLink': string;
    /**
     * 
     * @type {number}
     * @memberof FileResponse
     */
    'createdAt': number;
    /**
     * 
     * @type {number}
     * @memberof FileResponse
     */
    'updatedAt': number;
    /**
     * mimeType
     * @type {string}
     * @memberof FileResponse
     */
    'contentType': string;
    /**
     * 
     * @type {number}
     * @memberof FileResponse
     */
    'involveId': number;
}
/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'hostPrefix': string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'repo': string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'digest': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Image
     */
    'tags': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'imageSize': number;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'pushTime'?: number;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'pullTime'?: number;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'pullCommand': string;
}
/**
 * 
 * @export
 * @interface ImageBuildTask
 */
export interface ImageBuildTask {
    /**
     * 
     * @type {string}
     * @memberof ImageBuildTask
     */
    'hostPrefix': string;
    /**
     * 
     * @type {string}
     * @memberof ImageBuildTask
     */
    'owner': string;
    /**
     * 
     * @type {string}
     * @memberof ImageBuildTask
     */
    'repo': string;
    /**
     * 
     * @type {string}
     * @memberof ImageBuildTask
     */
    'tag': string;
    /**
     * UNDO, DOING, SUCCESS, FAIL
     * @type {string}
     * @memberof ImageBuildTask
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof ImageBuildTask
     */
    'createdTime': number;
    /**
     * 
     * @type {number}
     * @memberof ImageBuildTask
     */
    'endTime': number;
}
/**
 * 
 * @export
 * @interface ImageRepo
 */
export interface ImageRepo {
    /**
     * 
     * @type {string}
     * @memberof ImageRepo
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ImageRepo
     */
    'artifactsCount': number;
    /**
     * 
     * @type {number}
     * @memberof ImageRepo
     */
    'downloadCount': number;
    /**
     * 
     * @type {number}
     * @memberof ImageRepo
     */
    'updateTime'?: number;
    /**
     * 
     * @type {Array<Image>}
     * @memberof ImageRepo
     */
    'images'?: Array<Image>;
}
/**
 * 
 * @export
 * @interface PatchAssignmentRequest
 */
export interface PatchAssignmentRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchAssignmentRequest
     */
    'fileId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchAssignmentRequest
     */
    'finalScore'?: number;
}
/**
 * 
 * @export
 * @interface PatchPeerAppealRequest
 */
export interface PatchPeerAppealRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchPeerAppealRequest
     */
    'content'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchPeerAppealRequest
     */
    'processStatus'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchPeerAppealRequest
     */
    'processContent'?: string;
}
/**
 * 
 * @export
 * @interface PatchVmApplyVms
 */
export interface PatchVmApplyVms {
    /**
     * 需要为实验中的学生新增虚拟机时，使用该字段
     * @type {Array<string>}
     * @memberof PatchVmApplyVms
     */
    'studentIdList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PeerAppealResponse
 */
export interface PeerAppealResponse {
    /**
     * 
     * @type {number}
     * @memberof PeerAppealResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof PeerAppealResponse
     */
    'expId': number;
    /**
     * 
     * @type {string}
     * @memberof PeerAppealResponse
     */
    'studentId': string;
    /**
     * 
     * @type {string}
     * @memberof PeerAppealResponse
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof PeerAppealResponse
     */
    'appealedAt': number;
    /**
     * 
     * @type {SimpleUser}
     * @memberof PeerAppealResponse
     */
    'processor'?: SimpleUser;
    /**
     * 
     * @type {string}
     * @memberof PeerAppealResponse
     */
    'processContent'?: string;
    /**
     * 0: 未处理 1: 批准 2: 驳回
     * @type {number}
     * @memberof PeerAppealResponse
     */
    'processStatus': number;
    /**
     * 
     * @type {number}
     * @memberof PeerAppealResponse
     */
    'processedAt'?: number;
}
/**
 * 
 * @export
 * @interface PostPaasUserRequest
 */
export interface PostPaasUserRequest {
    /**
     * 学工号
     * @type {string}
     * @memberof PostPaasUserRequest
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface PostProjectProjectIdImagesRequest
 */
export interface PostProjectProjectIdImagesRequest {
    /**
     * 
     * @type {string}
     * @memberof PostProjectProjectIdImagesRequest
     */
    'name': string;
    /**
     * 默认 latest
     * @type {string}
     * @memberof PostProjectProjectIdImagesRequest
     */
    'tag'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectProjectIdImagesRequest
     */
    'dockerfilePath'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectProjectIdImagesRequest
     */
    'gitUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectProjectIdImagesRequest
     */
    'gitUsername'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectProjectIdImagesRequest
     */
    'gitPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectProjectIdImagesRequest
     */
    'gitRef'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectProjectIdImagesRequest
     */
    'dockerfileContent'?: string;
}
/**
 * 
 * @export
 * @interface PostProjectProjectIdMembersRequest
 */
export interface PostProjectProjectIdMembersRequest {
    /**
     * 
     * @type {string}
     * @memberof PostProjectProjectIdMembersRequest
     */
    'userId': string;
    /**
     * 枚举值，OWNER，ADMIN，MEMBER
     * @type {string}
     * @memberof PostProjectProjectIdMembersRequest
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface PostProjectsRequest
 */
export interface PostProjectsRequest {
    /**
     * 字符串格式为 RFC1035
     * @type {string}
     * @memberof PostProjectsRequest
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PostProjectsRequest
     */
    'expId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostProjectsRequest
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectsRequest
     */
    'description'?: string;
    /**
     * 表示是否是个人项目，默认为false
     * @type {boolean}
     * @memberof PostProjectsRequest
     */
    'isPersonal'?: boolean;
}
/**
 * 
 * @export
 * @interface PostProjectsRequest1
 */
export interface PostProjectsRequest1 {
    /**
     * 项目名称， 不允许使用与他人或自己重复的项目名称， 且项目名称必须符合 RFC1035 规范
     * @type {string}
     * @memberof PostProjectsRequest1
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PostProjectsRequest1
     */
    'expId'?: number;
    /**
     * 是否是个人项目。个人项目不允许添加其他成员。默认为false
     * @type {boolean}
     * @memberof PostProjectsRequest1
     */
    'isPersonal'?: boolean;
}
/**
 * 
 * @export
 * @interface PostVmTemplateRequest
 */
export interface PostVmTemplateRequest {
    /**
     * 需要转换的虚拟机的UUID
     * @type {string}
     * @memberof PostVmTemplateRequest
     */
    'uuid': string;
    /**
     * 转换出来的模板的名称
     * @type {string}
     * @memberof PostVmTemplateRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'owner': string;
    /**
     * 当前该用户访问该Project中的资源，例如clone代码仓库、push和pull镜像等，所需要使用的token，即密码
     * @type {string}
     * @memberof Project
     */
    'token': string;
    /**
     * 
     * @type {Array<Repository>}
     * @memberof Project
     */
    'repositories': Array<Repository>;
    /**
     * 
     * @type {Array<ProjectMember>}
     * @memberof Project
     */
    'members': Array<ProjectMember>;
    /**
     * 区别于name之外的一个格式随便的，便于记忆和展示的名字
     * @type {string}
     * @memberof Project
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ProjectMember
 */
export interface ProjectMember {
    /**
     * 
     * @type {number}
     * @memberof ProjectMember
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ProjectMember
     */
    'projectId': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectMember
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectMember
     */
    'username': string;
    /**
     * 枚举值，OWNER，ADMIN, MEMBER
     * @type {string}
     * @memberof ProjectMember
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface PutExperimentRequest
 */
export interface PutExperimentRequest {
    /**
     * 
     * @type {string}
     * @memberof PutExperimentRequest
     */
    'name': string;
    /**
     * 表示是“实验”还是“作业”
     * @type {boolean}
     * @memberof PutExperimentRequest
     */
    'type': boolean;
    /**
     * 
     * @type {string}
     * @memberof PutExperimentRequest
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof PutExperimentRequest
     */
    'endTime': string;
    /**
     * 
     * @type {string}
     * @memberof PutExperimentRequest
     */
    'deadline': string;
    /**
     * 
     * @type {string}
     * @memberof PutExperimentRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PutExperimentRequest
     */
    'enablePeer': boolean;
    /**
     * 
     * @type {string}
     * @memberof PutExperimentRequest
     */
    'peerDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutExperimentRequest
     */
    'peerEndTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutExperimentRequest
     */
    'peerAppealDeadline'?: string;
    /**
     * 该值在目前的处理逻辑中会被忽略
     * @type {number}
     * @memberof PutExperimentRequest
     */
    'courseId'?: number;
}
/**
 * 
 * @export
 * @interface Repository
 */
export interface Repository {
    /**
     * 
     * @type {string}
     * @memberof Repository
     */
    'name': string;
    /**
     * 代码仓库的URL
     * @type {string}
     * @memberof Repository
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface SimpleProject
 */
export interface SimpleProject {
    /**
     * 
     * @type {number}
     * @memberof SimpleProject
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SimpleProject
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleProject
     */
    'owner': string;
    /**
     * 当前该用户访问该Project中的资源，例如clone代码仓库、push和pull镜像等，所需要使用的token，即密码
     * @type {string}
     * @memberof SimpleProject
     */
    'token': string;
    /**
     * 区别于name之外的一个格式随便的，便于记忆和展示的名字
     * @type {string}
     * @memberof SimpleProject
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleProject
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface SimpleUser
 */
export interface SimpleUser {
    /**
     * 
     * @type {string}
     * @memberof SimpleUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleUser
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface StatCourseExp
 */
export interface StatCourseExp {
    /**
     * 
     * @type {number}
     * @memberof StatCourseExp
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof StatCourseExp
     */
    'name': string;
    /**
     * 表示是实验还是作业。false表示是作业，true表示是实验
     * @type {boolean}
     * @memberof StatCourseExp
     */
    'type': boolean;
    /**
     * 
     * @type {string}
     * @memberof StatCourseExp
     */
    'detail': string;
    /**
     * 
     * @type {string}
     * @memberof StatCourseExp
     */
    'createTime': string;
    /**
     * 
     * @type {string}
     * @memberof StatCourseExp
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof StatCourseExp
     */
    'endTime': string;
    /**
     * 
     * @type {string}
     * @memberof StatCourseExp
     */
    'deadline': string;
    /**
     * 
     * @type {boolean}
     * @memberof StatCourseExp
     */
    'isPeerAssessment': boolean;
    /**
     * 
     * @type {string}
     * @memberof StatCourseExp
     */
    'peerAssessmentDeadline': string;
    /**
     * 
     * @type {string}
     * @memberof StatCourseExp
     */
    'appealDeadline': string;
    /**
     * 
     * @type {string}
     * @memberof StatCourseExp
     */
    'peerAssessmentRules': string;
    /**
     * 
     * @type {boolean}
     * @memberof StatCourseExp
     */
    'peerAssessmentStart': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StatCourseExp
     */
    'sentEmail': boolean;
    /**
     * 
     * @type {ExpVmInfo}
     * @memberof StatCourseExp
     */
    'vm'?: ExpVmInfo;
    /**
     * 已提交作业的人数
     * @type {number}
     * @memberof StatCourseExp
     */
    'submittedAssignmentsCnt': number;
}
/**
 * 某门课程中所有实验的详细统计信息
 * @export
 * @interface StatCourseExpsResponse
 */
export interface StatCourseExpsResponse {
    /**
     * 
     * @type {CourseResponse}
     * @memberof StatCourseExpsResponse
     */
    'course': CourseResponse;
    /**
     * 
     * @type {UserModel}
     * @memberof StatCourseExpsResponse
     */
    'teacher': UserModel;
    /**
     * 
     * @type {Array<StatCourseExp>}
     * @memberof StatCourseExpsResponse
     */
    'exps': Array<StatCourseExp>;
    /**
     * 
     * @type {number}
     * @memberof StatCourseExpsResponse
     */
    'studentCnt': number;
}
/**
 * 统计某门实验的提交作业的情况
 * @export
 * @interface StatExpAssignmentResponse
 */
export interface StatExpAssignmentResponse {
    /**
     * 
     * @type {Array<StatExpAssignmentResponseAssignments>}
     * @memberof StatExpAssignmentResponse
     */
    'assignments'?: Array<StatExpAssignmentResponseAssignments>;
}
/**
 * 
 * @export
 * @interface StatExpAssignmentResponseAssignments
 */
export interface StatExpAssignmentResponseAssignments {
    /**
     * 
     * @type {string}
     * @memberof StatExpAssignmentResponseAssignments
     */
    'studentId': string;
    /**
     * 
     * @type {string}
     * @memberof StatExpAssignmentResponseAssignments
     */
    'studentName': string;
    /**
     * 
     * @type {AssignmentResponse}
     * @memberof StatExpAssignmentResponseAssignments
     */
    'assignment'?: AssignmentResponse;
}
/**
 * 
 * @export
 * @interface StudentPeerTaskResponse
 */
export interface StudentPeerTaskResponse {
    /**
     * AssignmentId
     * @type {number}
     * @memberof StudentPeerTaskResponse
     */
    'id': number;
    /**
     * 
     * @type {FileResponse}
     * @memberof StudentPeerTaskResponse
     */
    'file': FileResponse;
    /**
     * 
     * @type {AssessmentInfoResponse}
     * @memberof StudentPeerTaskResponse
     */
    'peerInfo'?: AssessmentInfoResponse;
}
/**
 * 
 * @export
 * @interface TermModel
 */
export interface TermModel {
    /**
     * 
     * @type {number}
     * @memberof TermModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TermModel
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UploadFileResponse
 */
export interface UploadFileResponse {
    /**
     * 
     * @type {Array<FileResponse>}
     * @memberof UploadFileResponse
     */
    'files'?: Array<FileResponse>;
}
/**
 * 
 * @export
 * @interface UserModel
 */
export interface UserModel {
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof UserModel
     */
    'department': number;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface VirtualMachine
 */
export interface VirtualMachine {
    /**
     * 
     * @type {string}
     * @memberof VirtualMachine
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachine
     */
    'platform': string;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachine
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof VirtualMachine
     */
    'isTemplate': boolean;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachine
     */
    'host': string;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachine
     */
    'adminId': string;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachine
     */
    'studentId': string;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachine
     */
    'teacherId': string;
    /**
     * 
     * @type {boolean}
     * @memberof VirtualMachine
     */
    'isExperimental': boolean;
    /**
     * 
     * @type {number}
     * @memberof VirtualMachine
     */
    'experimentId': number;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachine
     */
    'applyId': string;
    /**
     * MB
     * @type {number}
     * @memberof VirtualMachine
     */
    'memory': number;
    /**
     * 
     * @type {number}
     * @memberof VirtualMachine
     */
    'cpu': number;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachine
     */
    'osFullName': string;
    /**
     * 
     * @type {number}
     * @memberof VirtualMachine
     */
    'diskNum': number;
    /**
     * byte
     * @type {number}
     * @memberof VirtualMachine
     */
    'diskSize': number;
    /**
     * suspended, poweredOn, poweredOff
     * @type {string}
     * @memberof VirtualMachine
     */
    'powerState': string;
    /**
     * gray, green, yellow, red
     * @type {string}
     * @memberof VirtualMachine
     */
    'overallStatus': string;
    /**
     * 
     * @type {Array<VmNetInfo>}
     * @memberof VirtualMachine
     */
    'netInfos': Array<VmNetInfo>;
}
/**
 * 
 * @export
 * @interface VirtualMachineTemplate
 */
export interface VirtualMachineTemplate {
    /**
     * 
     * @type {string}
     * @memberof VirtualMachineTemplate
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachineTemplate
     */
    'platform': string;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachineTemplate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachineTemplate
     */
    'host': string;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachineTemplate
     */
    'adminId': string;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachineTemplate
     */
    'studentId': string;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachineTemplate
     */
    'teacherId': string;
    /**
     * 
     * @type {boolean}
     * @memberof VirtualMachineTemplate
     */
    'isExperimental': boolean;
    /**
     * 
     * @type {number}
     * @memberof VirtualMachineTemplate
     */
    'experimentId': number;
    /**
     * MB
     * @type {number}
     * @memberof VirtualMachineTemplate
     */
    'memory': number;
    /**
     * 
     * @type {number}
     * @memberof VirtualMachineTemplate
     */
    'cpu': number;
    /**
     * 
     * @type {string}
     * @memberof VirtualMachineTemplate
     */
    'osFullName': string;
    /**
     * 
     * @type {number}
     * @memberof VirtualMachineTemplate
     */
    'diskNum': number;
    /**
     * byte
     * @type {number}
     * @memberof VirtualMachineTemplate
     */
    'diskSize': number;
    /**
     * gray, green, yellow, red
     * @type {string}
     * @memberof VirtualMachineTemplate
     */
    'overallStatus': string;
}
/**
 * 
 * @export
 * @interface VmNetInfo
 */
export interface VmNetInfo {
    /**
     * 
     * @type {string}
     * @memberof VmNetInfo
     */
    'macAddress': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof VmNetInfo
     */
    'ipList': Array<string>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 删除某个作业的所有评阅记录
         * @summary 删除某个作业的所有评阅记录
         * @param {number} [assignmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssignmentReviews: async (assignmentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/assignmentReviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除课程资源
         * @summary 删除课程资源
         * @param {number} courseId 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourseCourseIdResourceResourceId: async (courseId: number, resourceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('deleteCourseCourseIdResourceResourceId', 'courseId', courseId)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('deleteCourseCourseIdResourceResourceId', 'resourceId', resourceId)
            const localVarPath = `/course/{courseId}/resource/{resourceId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 批量删除课程资源
         * @summary 批量删除课程资源
         * @param {number} courseId 
         * @param {DeleteCourseResourcesRequest} [deleteCourseResourcesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourseCourseIdResources: async (courseId: number, deleteCourseResourcesRequest?: DeleteCourseResourcesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('deleteCourseCourseIdResources', 'courseId', courseId)
            const localVarPath = `/course/{courseId}/resources`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCourseResourcesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除一项互评申诉（学生主动撤销）
         * @summary 删除一项互评申诉
         * @param {number} peerAppealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeerAppealPeerAppealId: async (peerAppealId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'peerAppealId' is not null or undefined
            assertParamExists('deletePeerAppealPeerAppealId', 'peerAppealId', peerAppealId)
            const localVarPath = `/peerAppeal/{peerAppealId}`
                .replace(`{${"peerAppealId"}}`, encodeURIComponent(String(peerAppealId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 从项目中移除成员
         * @summary 从项目中移除成员
         * @param {number} projectId 
         * @param {DeleteProjectProjectIdMembersRequest} [deleteProjectProjectIdMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectProjectIdMembers: async (projectId: number, deleteProjectProjectIdMembersRequest?: DeleteProjectProjectIdMembersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteProjectProjectIdMembers', 'projectId', projectId)
            const localVarPath = `/project/{projectId}/members`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteProjectProjectIdMembersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除“虚拟机创建申请”中的虚拟机
         * @summary 删除“虚拟机创建申请”中的虚拟机
         * @param {string} applyId 
         * @param {DeleteVmApplyVms} [deleteVmApplyVms] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVmsApplyApplyIdVms: async (applyId: string, deleteVmApplyVms?: DeleteVmApplyVms, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applyId' is not null or undefined
            assertParamExists('deleteVmsApplyApplyIdVms', 'applyId', applyId)
            const localVarPath = `/vms/apply/{applyId}/vms`
                .replace(`{${"applyId"}}`, encodeURIComponent(String(applyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteVmApplyVms, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取一项作业的评阅记录
         * @summary 获取一项作业的评阅记录
         * @param {number} [assignmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentReviews: async (assignmentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/assignmentReviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 校验token
         * @summary 校验token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthentications: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authentications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取课程信息
         * @summary 获取课程信息
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseCourseId: async (courseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getCourseCourseId', 'courseId', courseId)
            const localVarPath = `/course/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取课程所属的所有课程资源
         * @summary 获取课程所属的所有课程资源
         * @param {number} courseId 
         * @param {string} [type] 表示获取的课程资源类型，如果该值为空，则表示两种资源都获取。CourseResource, ExperimentResource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseCourseIdResource: async (courseId: number, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getCourseCourseIdResource', 'courseId', courseId)
            const localVarPath = `/course/{courseId}/resources`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取实验（作业）下学生提交的作业信息  如果是当前课程的教师或助教调用，则返回当前实验的全部作业  否则，仅返回当前学生的作业
         * @summary 获取实验（作业）下学生提交的作业信息
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentExperimentIdAssignment: async (experimentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('getExperimentExperimentIdAssignment', 'experimentId', experimentId)
            const localVarPath = `/experiment/{experimentId}/assignments`
                .replace(`{${"experimentId"}}`, encodeURIComponent(String(experimentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查看某次作业的详细信息
         * @summary 查看作业
         * @param {number} experimentId 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentExperimentIdAssignmentAssignmentId: async (experimentId: number, assignmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('getExperimentExperimentIdAssignmentAssignmentId', 'experimentId', experimentId)
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('getExperimentExperimentIdAssignmentAssignmentId', 'assignmentId', assignmentId)
            const localVarPath = `/experiment/{experimentId}/assignment/{assignmentId}`
                .replace(`{${"experimentId"}}`, encodeURIComponent(String(experimentId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取实验名称列表
         * @summary 获取实验名称列表
         * @param {number} [courseId] 指定课程
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentsNames: async (courseId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/experiments/names`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取一项实验（作业）详情
         * @summary 获取一项实验（作业）
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimnetExperimentId: async (experimentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('getExperimnetExperimentId', 'experimentId', experimentId)
            const localVarPath = `/experimnet/{experimentId}`
                .replace(`{${"experimentId"}}`, encodeURIComponent(String(experimentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 学生获取属于自己的实验信息列表
         * @summary 获取实验信息列表
         * @param {number} [termId] 学期序号。该值缺失，或小于等于0时，将默认获取最新学期的信息
         * @param {boolean} [submitted] 当为true时，表示获取已完成的实验列表；为false时，表示获取未完成的实验列表；缺失时，表示同时获取已完成和未完成的实验列表。
         * @param {number} [courseId] 当为空或不合法时，获取所有符合上述条件的课程的实验列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpriments: async (termId?: number, submitted?: boolean, courseId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/expriments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (termId !== undefined) {
                localVarQueryParameter['termId'] = termId;
            }

            if (submitted !== undefined) {
                localVarQueryParameter['submitted'] = submitted;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取文件的元信息
         * @summary 获取文件元信息
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileFileId: async (fileId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFileFileId', 'fileId', fileId)
            const localVarPath = `/file/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 下载文件 文件的一些元信息（名称、format-type）等展示在相应的header中  该接口的response是一个二进制字节流，即为文件的内容
         * @summary 下载文件
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileFileIdContent: async (fileId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFileFileIdContent', 'fileId', fileId)
            const localVarPath = `/file/{fileId}/content`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 打包下载文件，如下载当前实验的全部作业，或下载当前课程的全部资源
         * @summary 下载打包好的zip
         * @param {string} packageId 
         * @param {string} packageName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilePackage: async (packageId: string, packageName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('getFilePackage', 'packageId', packageId)
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('getFilePackage', 'packageName', packageName)
            const localVarPath = `/file/package`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (packageId !== undefined) {
                localVarQueryParameter['packageId'] = packageId;
            }

            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取文件打包的结果
         * @summary 查询文件打包的结果
         * @param {string} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilePackageResult: async (packageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('getFilePackageResult', 'packageId', packageId)
            const localVarPath = `/file/package/result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (packageId !== undefined) {
                localVarQueryParameter['packageId'] = packageId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查看一项互评申诉
         * @summary 查看一项互评申诉
         * @param {number} peerAppealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeerAppealPeerAppealId: async (peerAppealId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'peerAppealId' is not null or undefined
            assertParamExists('getPeerAppealPeerAppealId', 'peerAppealId', peerAppealId)
            const localVarPath = `/peerAppeal/{peerAppealId}`
                .replace(`{${"peerAppealId"}}`, encodeURIComponent(String(peerAppealId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取互评申诉列表
         * @summary 获取互评申诉列表
         * @param {number} expId 
         * @param {number} [studentId] 如果调用者为学生，那么即使设置了该字段，也会被忽略
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeerAppeals: async (expId: number, studentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expId' is not null or undefined
            assertParamExists('getPeerAppeals', 'expId', expId)
            const localVarPath = `/peerAppeals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (expId !== undefined) {
                localVarQueryParameter['expId'] = expId;
            }

            if (studentId !== undefined) {
                localVarQueryParameter['studentId'] = studentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取某个作业的互评信息
         * @summary 获取某个作业的互评信息
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeerAssessment: async (assignmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('getPeerAssessment', 'assignmentId', assignmentId)
            const localVarPath = `/peerAssessment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assignmentId !== undefined) {
                localVarQueryParameter['assignmentId'] = assignmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 学生获取属于自己的互评任务
         * @summary 获取属于自己的互评任务
         * @param {number} expId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeerTasks: async (expId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expId' is not null or undefined
            assertParamExists('getPeerTasks', 'expId', expId)
            const localVarPath = `/peerTasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (expId !== undefined) {
                localVarQueryParameter['expId'] = expId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查看某一项目详情
         * @summary 查看某一项目详情
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectId: async (projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectProjectId', 'projectId', projectId)
            const localVarPath = `/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前项目下的所有镜像构建任务
         * @summary 获取镜像构建任务
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectIdImageBuildTasks: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectProjectIdImageBuildTasks', 'projectId', projectId)
            const localVarPath = `/project/{projectId}/imageBuildTasks`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前项目下的所有Harbor镜像仓库
         * @summary 获取Harbor镜像仓库
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectIdImageRepos: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectProjectIdImageRepos', 'projectId', projectId)
            const localVarPath = `/project/{projectId}/imageRepos`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前项目中的所有可用镜像
         * @summary 获取项目中的镜像列表
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectIdImages: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectProjectIdImages', 'projectId', projectId)
            const localVarPath = `/project/{projectId}/images`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取项目中的所有成员
         * @summary 获取项目中的所有成员
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectIdMembers: async (projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectProjectIdMembers', 'projectId', projectId)
            const localVarPath = `/project/{projectId}/members`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取项目列表
         * @summary 获取项目列表
         * @param {number} [expId] 如果该值为空，则默认返回该用户创建或参与的所有项目
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (expId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (expId !== undefined) {
                localVarQueryParameter['expId'] = expId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取课程中所有实验的统计信息，本课程的助教或教师调用
         * @summary 获取课程中所有实验的统计信息
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatCourseCourseIdExperiments: async (courseId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getStatCourseCourseIdExperiments', 'courseId', courseId)
            const localVarPath = `/stat/course/{courseId}/experiments`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取课程中所有实验的统计信息，本课程的助教或教师调用
         * @summary 获取课程中所有实验的统计信息
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatCourseCourseIdExperiments_1: async (courseId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('getStatCourseCourseIdExperiments_1', 'courseId', courseId)
            const localVarPath = `/stat/course/{courseId}/experiments`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 统计某门实验的提交作业的情况（该课程的助教或教师调用）
         * @summary 统计某门实验的提交作业的情况
         * @param {number} expId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatExpExpIdAssignment: async (expId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expId' is not null or undefined
            assertParamExists('getStatExpExpIdAssignment', 'expId', expId)
            const localVarPath = `/stat/exp/{expId}/assignments`
                .replace(`{${"expId"}}`, encodeURIComponent(String(expId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 统计某门实验的提交作业的情况（该课程的助教或教师调用）
         * @summary 统计某门实验的提交作业的情况
         * @param {number} expId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatExpExpIdAssignment_2: async (expId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expId' is not null or undefined
            assertParamExists('getStatExpExpIdAssignment_2', 'expId', expId)
            const localVarPath = `/stat/exp/{expId}/assignments`
                .replace(`{${"expId"}}`, encodeURIComponent(String(expId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查看“创建虚拟机的申请”
         * @summary 查看“创建虚拟机的申请”
         * @param {string} applyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVmApply: async (applyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applyId' is not null or undefined
            assertParamExists('getVmApply', 'applyId', applyId)
            const localVarPath = `/vms/apply/{applyId}`
                .replace(`{${"applyId"}}`, encodeURIComponent(String(applyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前可用的所有虚拟机模板 返回的是一个数组  该接口已被启用，请使用 GET /vm/templates
         * @summary 获取当前可用的所有虚拟机模板
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getVmTemplate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vm/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前可用的所有虚拟机模板 返回的是一个数组  逻辑是： 1. 如果是管理员，返回所有的虚拟机模板 2. 如果是教师，返回所有公共模板、该教师自己制作的所有模板、该教师的助教制作的所有模板 3. 如果是学生，   a. 如果是助教，返回所有公共模板、该学生自己制作的所有模板、助教所属课程的教师制作的所有模板   b. 如果不是助教，返回所有公共模板、该学生自己制作的所有模板  前端在使用该接口时，可以考虑在具体场景中，对获取到的列表做进一步的过滤
         * @summary 获取当前用户可用的所有虚拟机模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVmTemplates: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vm/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据UUID获取虚拟机信息
         * @summary get vm by uuid
         * @param {string} vmId vm uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVmVmId: async (vmId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vmId' is not null or undefined
            assertParamExists('getVmVmId', 'vmId', vmId)
            const localVarPath = `/vm/{vmId}`
                .replace(`{${"vmId"}}`, encodeURIComponent(String(vmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取符合条件的所有虚拟机
         * @summary get Virtual Machine list
         * @param {string} [studentId] 
         * @param {string} [teacherId] 
         * @param {number} [experimentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVms: async (studentId?: string, teacherId?: string, experimentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['studentId'] = studentId;
            }

            if (teacherId !== undefined) {
                localVarQueryParameter['teacherId'] = teacherId;
            }

            if (experimentId !== undefined) {
                localVarQueryParameter['experimentId'] = experimentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 用户查看所有与自己有关的创建虚拟机的申请 ！！！注意，该接口返回的是一个数组！！！
         * @summary 查看“创建虚拟机的申请”
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVmsApply: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vms/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 重复上传作业，直接覆盖之前的作业
         * @summary 修改作业
         * @param {number} experimentId 
         * @param {number} assignmentId 
         * @param {PatchAssignmentRequest} [patchAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchExperimentExperimentIdAssignment: async (experimentId: number, assignmentId: number, patchAssignmentRequest?: PatchAssignmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('patchExperimentExperimentIdAssignment', 'experimentId', experimentId)
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('patchExperimentExperimentIdAssignment', 'assignmentId', assignmentId)
            const localVarPath = `/experiment/{experimentId}/assignment/{assignmentId}`
                .replace(`{${"experimentId"}}`, encodeURIComponent(String(experimentId)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchAssignmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 两种应用场景：学生修改申诉的内容；教师或助教处理申诉
         * @summary 修改互评申诉
         * @param {number} peerAppealId 
         * @param {PatchPeerAppealRequest} [patchPeerAppealRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPeerAppealPeerAppealId: async (peerAppealId: number, patchPeerAppealRequest?: PatchPeerAppealRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'peerAppealId' is not null or undefined
            assertParamExists('patchPeerAppealPeerAppealId', 'peerAppealId', peerAppealId)
            const localVarPath = `/peerAppeal/{peerAppealId}`
                .replace(`{${"peerAppealId"}}`, encodeURIComponent(String(peerAppealId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchPeerAppealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 对虚拟机进行开关机操作
         * @summary 虚拟机开关机
         * @param {string} vmId vm uuid
         * @param {string} action powerOn 表示开机；powerOff 表示关机
         * @param {boolean} [sync] 表示该请求是否同步返回，默认为false，即默认异步。client需要在后续查询具体的执行情况
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVmVmIdPower: async (vmId: string, action: string, sync?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vmId' is not null or undefined
            assertParamExists('patchVmVmIdPower', 'vmId', vmId)
            // verify required parameter 'action' is not null or undefined
            assertParamExists('patchVmVmIdPower', 'action', action)
            const localVarPath = `/vm/{vmId}/power`
                .replace(`{${"vmId"}}`, encodeURIComponent(String(vmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (sync !== undefined) {
                localVarQueryParameter['sync'] = sync;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理员处理“创建虚拟机的申请”
         * @summary 管理员处理“创建虚拟机的申请”
         * @param {string} applyId 
         * @param {boolean} approve 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVmsApply: async (applyId: string, approve: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applyId' is not null or undefined
            assertParamExists('patchVmsApply', 'applyId', applyId)
            // verify required parameter 'approve' is not null or undefined
            assertParamExists('patchVmsApply', 'approve', approve)
            const localVarPath = `/vms/apply/{applyId}`
                .replace(`{${"applyId"}}`, encodeURIComponent(String(applyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (approve !== undefined) {
                localVarQueryParameter['approve'] = approve;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 修改“虚拟机创建申请”中的虚拟机个数 例如，可以使用此接口为已经审批通过的申请创建添加新的虚拟机，但不可删除
         * @summary 修改“虚拟机创建申请”中的虚拟机情况
         * @param {string} applyId 
         * @param {PatchVmApplyVms} [patchVmApplyVms] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVmsApplyVms: async (applyId: string, patchVmApplyVms?: PatchVmApplyVms, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applyId' is not null or undefined
            assertParamExists('patchVmsApplyVms', 'applyId', applyId)
            const localVarPath = `/vms/apply/{applyId}/vms`
                .replace(`{${"applyId"}}`, encodeURIComponent(String(applyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchVmApplyVms, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 保存评阅记录记录
         * @summary 保存评阅作业记录
         * @param {AssignmentReviewRequest} [assignmentReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssignmentReviews: async (assignmentReviewRequest?: AssignmentReviewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/assignmentReviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignmentReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建实验/作业
         * @summary 创建实验/作业
         * @param {CreateExperimentRequest} [createExperimentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExperiment: async (createExperimentRequest?: CreateExperimentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExperimentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为一项实验正式开启互评
         * @summary 为一项实验正式开启互评
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExperimentEnablePeer: async (experimentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('postExperimentEnablePeer', 'experimentId', experimentId)
            const localVarPath = `/experiment/{experimentId}/enablePeer`
                .replace(`{${"experimentId"}}`, encodeURIComponent(String(experimentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 第一次上传作业
         * @summary 创建作业
         * @param {number} experimentId 
         * @param {AssignmentRequest} [assignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExperimentExperimentIdAssignment: async (experimentId: number, assignmentRequest?: AssignmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('postExperimentExperimentIdAssignment', 'experimentId', experimentId)
            const localVarPath = `/experiment/{experimentId}/assignment`
                .replace(`{${"experimentId"}}`, encodeURIComponent(String(experimentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取需要作为互评标准作业的8份作业，如果没有就创建（助教或教师调用）
         * @summary 获取需要作为互评标准作业的作业
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExperimentSelectStandardAssignments: async (experimentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('postExperimentSelectStandardAssignments', 'experimentId', experimentId)
            const localVarPath = `/experiment/{experimentId}/selectStandardAssignments`
                .replace(`{${"experimentId"}}`, encodeURIComponent(String(experimentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 上传新文件，或修改旧文件。如果请求体中的fileId为空或为0，那么为创建新文件，或者为修改旧文件
         * @summary 创建或修改文件
         * @param {string} owner 
         * @param {string} fileType 枚举值，可以取值 Assignment
         * @param {number} involvedId 
         * @param {any} [file] 
         * @param {number} [fileId] 可选，如果为空，则表示创建新文件；如果不为空，表示修改旧文件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFile: async (owner: string, fileType: string, involvedId: number, file?: any, fileId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('postFile', 'owner', owner)
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('postFile', 'fileType', fileType)
            // verify required parameter 'involvedId' is not null or undefined
            assertParamExists('postFile', 'involvedId', involvedId)
            const localVarPath = `/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (owner !== undefined) { 
                localVarFormParams.append('owner', owner as any);
            }
    
            if (fileType !== undefined) { 
                localVarFormParams.append('fileType', fileType as any);
            }
    
            if (involvedId !== undefined) { 
                localVarFormParams.append('involvedId', involvedId as any);
            }
    
            if (fileId !== undefined) { 
                localVarFormParams.append('fileId', fileId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 触发打包动作
         * @summary 触发打包动作
         * @param {FilePackageRequest} [filePackageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFilePackage: async (filePackageRequest?: FilePackageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/file/package`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filePackageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 在各个PaaS相关后端中创建用户。 该接口是幂等的，可多次重复调用而没有副作用。
         * @summary 在各个PaaS相关后端中创建用户
         * @param {PostPaasUserRequest} [postPaasUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaasUser: async (postPaasUserRequest?: PostPaasUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/paasUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPaasUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 学生提起申诉
         * @summary 提起申诉
         * @param {CreatePeerAppealRequest} [createPeerAppealRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPeerAppeal: async (createPeerAppealRequest?: CreatePeerAppealRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/peerAppeal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPeerAppealRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为一项作业评分
         * @summary 为一个作业评分
         * @param {CreatePeerAssessmentRequest} [createPeerAssessmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPeerAssessment: async (createPeerAssessmentRequest?: CreatePeerAssessmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/peerAssessment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPeerAssessmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 构建镜像。该接口异步返回。
         * @summary 构建镜像
         * @param {string} projectId 
         * @param {PostProjectProjectIdImagesRequest} [postProjectProjectIdImagesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectProjectIdImages: async (projectId: string, postProjectProjectIdImagesRequest?: PostProjectProjectIdImagesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postProjectProjectIdImages', 'projectId', projectId)
            const localVarPath = `/project/{projectId}/images`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProjectProjectIdImagesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 添加项目成员 仅支持项目管理员操作
         * @summary 添加项目成员
         * @param {number} projectId 
         * @param {PostProjectProjectIdMembersRequest} [postProjectProjectIdMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectProjectIdMembers: async (projectId: number, postProjectProjectIdMembersRequest?: PostProjectProjectIdMembersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postProjectProjectIdMembers', 'projectId', projectId)
            const localVarPath = `/project/{projectId}/members`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProjectProjectIdMembersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 接口调用者为自己创建一个新项目
         * @summary 创建新项目
         * @param {PostProjectsRequest} [postProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjects: async (postProjectsRequest?: PostProjectsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProjectsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建虚拟机模板，本质上是将虚拟机转换为模板  前端应注意，在调用该接口前，应该提示用户先将虚拟机关机，并提示用户，该操作将删除当前虚拟机
         * @summary 创建虚拟机模板
         * @param {PostVmTemplateRequest} [postVmTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVmTemplate: async (postVmTemplateRequest?: PostVmTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vm/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postVmTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 学生、教师为自己申请虚拟机 或教师或助教为实验课程申请虚拟机
         * @summary 创建虚拟机申请
         * @param {CreateVmApplyRequest} [createVmApplyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVmsApply: async (createVmApplyRequest?: CreateVmApplyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vms/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVmApplyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 教师或助教修改实验/作业信息
         * @summary 修改实验/作业信息
         * @param {number} experimentId 
         * @param {PutExperimentRequest} [putExperimentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putExperimnetExperimentId: async (experimentId: number, putExperimentRequest?: PutExperimentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('putExperimnetExperimentId', 'experimentId', experimentId)
            const localVarPath = `/experimnet/{experimentId}`
                .replace(`{${"experimentId"}}`, encodeURIComponent(String(experimentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putExperimentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 删除某个作业的所有评阅记录
         * @summary 删除某个作业的所有评阅记录
         * @param {number} [assignmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAssignmentReviews(assignmentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssignmentReviews(assignmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除课程资源
         * @summary 删除课程资源
         * @param {number} courseId 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCourseCourseIdResourceResourceId(courseId: number, resourceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseCourseIdResourceResourceId(courseId, resourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 批量删除课程资源
         * @summary 批量删除课程资源
         * @param {number} courseId 
         * @param {DeleteCourseResourcesRequest} [deleteCourseResourcesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCourseCourseIdResources(courseId: number, deleteCourseResourcesRequest?: DeleteCourseResourcesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseCourseIdResources(courseId, deleteCourseResourcesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除一项互评申诉（学生主动撤销）
         * @summary 删除一项互评申诉
         * @param {number} peerAppealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePeerAppealPeerAppealId(peerAppealId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePeerAppealPeerAppealId(peerAppealId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 从项目中移除成员
         * @summary 从项目中移除成员
         * @param {number} projectId 
         * @param {DeleteProjectProjectIdMembersRequest} [deleteProjectProjectIdMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectProjectIdMembers(projectId: number, deleteProjectProjectIdMembersRequest?: DeleteProjectProjectIdMembersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectProjectIdMembers(projectId, deleteProjectProjectIdMembersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除“虚拟机创建申请”中的虚拟机
         * @summary 删除“虚拟机创建申请”中的虚拟机
         * @param {string} applyId 
         * @param {DeleteVmApplyVms} [deleteVmApplyVms] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVmsApplyApplyIdVms(applyId: string, deleteVmApplyVms?: DeleteVmApplyVms, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVmApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVmsApplyApplyIdVms(applyId, deleteVmApplyVms, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取一项作业的评阅记录
         * @summary 获取一项作业的评阅记录
         * @param {number} [assignmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentReviews(assignmentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssignmentReviewResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentReviews(assignmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 校验token
         * @summary 校验token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthentications(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Authentication>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthentications(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取课程信息
         * @summary 获取课程信息
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourseCourseId(courseId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseCourseId(courseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取课程所属的所有课程资源
         * @summary 获取课程所属的所有课程资源
         * @param {number} courseId 
         * @param {string} [type] 表示获取的课程资源类型，如果该值为空，则表示两种资源都获取。CourseResource, ExperimentResource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourseCourseIdResource(courseId: number, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseResourceResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseCourseIdResource(courseId, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取实验（作业）下学生提交的作业信息  如果是当前课程的教师或助教调用，则返回当前实验的全部作业  否则，仅返回当前学生的作业
         * @summary 获取实验（作业）下学生提交的作业信息
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperimentExperimentIdAssignment(experimentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExperimentExperimentIdAssignment(experimentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查看某次作业的详细信息
         * @summary 查看作业
         * @param {number} experimentId 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperimentExperimentIdAssignmentAssignmentId(experimentId: number, assignmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExperimentExperimentIdAssignmentAssignmentId(experimentId, assignmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取实验名称列表
         * @summary 获取实验名称列表
         * @param {number} [courseId] 指定课程
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperimentsNames(courseId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExperimentsNames(courseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取一项实验（作业）详情
         * @summary 获取一项实验（作业）
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperimnetExperimentId(experimentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperimentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExperimnetExperimentId(experimentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 学生获取属于自己的实验信息列表
         * @summary 获取实验信息列表
         * @param {number} [termId] 学期序号。该值缺失，或小于等于0时，将默认获取最新学期的信息
         * @param {boolean} [submitted] 当为true时，表示获取已完成的实验列表；为false时，表示获取未完成的实验列表；缺失时，表示同时获取已完成和未完成的实验列表。
         * @param {number} [courseId] 当为空或不合法时，获取所有符合上述条件的课程的实验列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExpriments(termId?: number, submitted?: boolean, courseId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperimentResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExpriments(termId, submitted, courseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取文件的元信息
         * @summary 获取文件元信息
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileFileId(fileId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileFileId(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 下载文件 文件的一些元信息（名称、format-type）等展示在相应的header中  该接口的response是一个二进制字节流，即为文件的内容
         * @summary 下载文件
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileFileIdContent(fileId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileFileIdContent(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 打包下载文件，如下载当前实验的全部作业，或下载当前课程的全部资源
         * @summary 下载打包好的zip
         * @param {string} packageId 
         * @param {string} packageName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilePackage(packageId: string, packageName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFilePackage(packageId, packageName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取文件打包的结果
         * @summary 查询文件打包的结果
         * @param {string} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilePackageResult(packageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFilePackageResult(packageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查看一项互评申诉
         * @summary 查看一项互评申诉
         * @param {number} peerAppealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPeerAppealPeerAppealId(peerAppealId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerAppealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPeerAppealPeerAppealId(peerAppealId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取互评申诉列表
         * @summary 获取互评申诉列表
         * @param {number} expId 
         * @param {number} [studentId] 如果调用者为学生，那么即使设置了该字段，也会被忽略
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPeerAppeals(expId: number, studentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PeerAppealResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPeerAppeals(expId, studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取某个作业的互评信息
         * @summary 获取某个作业的互评信息
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPeerAssessment(assignmentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentPeerAssessmentResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPeerAssessment(assignmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 学生获取属于自己的互评任务
         * @summary 获取属于自己的互评任务
         * @param {number} expId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPeerTasks(expId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudentPeerTaskResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPeerTasks(expId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查看某一项目详情
         * @summary 查看某一项目详情
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectProjectId(projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectProjectId(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取当前项目下的所有镜像构建任务
         * @summary 获取镜像构建任务
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectProjectIdImageBuildTasks(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageBuildTask>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectProjectIdImageBuildTasks(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取当前项目下的所有Harbor镜像仓库
         * @summary 获取Harbor镜像仓库
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectProjectIdImageRepos(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageRepo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectProjectIdImageRepos(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取当前项目中的所有可用镜像
         * @summary 获取项目中的镜像列表
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectProjectIdImages(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Image>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectProjectIdImages(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取项目中的所有成员
         * @summary 获取项目中的所有成员
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectProjectIdMembers(projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectMember>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectProjectIdMembers(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取项目列表
         * @summary 获取项目列表
         * @param {number} [expId] 如果该值为空，则默认返回该用户创建或参与的所有项目
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(expId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SimpleProject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(expId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取课程中所有实验的统计信息，本课程的助教或教师调用
         * @summary 获取课程中所有实验的统计信息
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatCourseCourseIdExperiments(courseId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatCourseExpsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatCourseCourseIdExperiments(courseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取课程中所有实验的统计信息，本课程的助教或教师调用
         * @summary 获取课程中所有实验的统计信息
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatCourseCourseIdExperiments_1(courseId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatCourseExpsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatCourseCourseIdExperiments_1(courseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 统计某门实验的提交作业的情况（该课程的助教或教师调用）
         * @summary 统计某门实验的提交作业的情况
         * @param {number} expId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatExpExpIdAssignment(expId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatExpAssignmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatExpExpIdAssignment(expId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 统计某门实验的提交作业的情况（该课程的助教或教师调用）
         * @summary 统计某门实验的提交作业的情况
         * @param {number} expId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatExpExpIdAssignment_2(expId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatExpAssignmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatExpExpIdAssignment_2(expId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查看“创建虚拟机的申请”
         * @summary 查看“创建虚拟机的申请”
         * @param {string} applyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVmApply(applyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateVmApplyResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVmApply(applyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取当前可用的所有虚拟机模板 返回的是一个数组  该接口已被启用，请使用 GET /vm/templates
         * @summary 获取当前可用的所有虚拟机模板
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getVmTemplate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VirtualMachine>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVmTemplate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取当前可用的所有虚拟机模板 返回的是一个数组  逻辑是： 1. 如果是管理员，返回所有的虚拟机模板 2. 如果是教师，返回所有公共模板、该教师自己制作的所有模板、该教师的助教制作的所有模板 3. 如果是学生，   a. 如果是助教，返回所有公共模板、该学生自己制作的所有模板、助教所属课程的教师制作的所有模板   b. 如果不是助教，返回所有公共模板、该学生自己制作的所有模板  前端在使用该接口时，可以考虑在具体场景中，对获取到的列表做进一步的过滤
         * @summary 获取当前用户可用的所有虚拟机模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVmTemplates(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VirtualMachineTemplate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVmTemplates(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据UUID获取虚拟机信息
         * @summary get vm by uuid
         * @param {string} vmId vm uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVmVmId(vmId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualMachine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVmVmId(vmId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取符合条件的所有虚拟机
         * @summary get Virtual Machine list
         * @param {string} [studentId] 
         * @param {string} [teacherId] 
         * @param {number} [experimentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVms(studentId?: string, teacherId?: string, experimentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VirtualMachine>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVms(studentId, teacherId, experimentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 用户查看所有与自己有关的创建虚拟机的申请 ！！！注意，该接口返回的是一个数组！！！
         * @summary 查看“创建虚拟机的申请”
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVmsApply(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateVmApplyResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVmsApply(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 重复上传作业，直接覆盖之前的作业
         * @summary 修改作业
         * @param {number} experimentId 
         * @param {number} assignmentId 
         * @param {PatchAssignmentRequest} [patchAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchExperimentExperimentIdAssignment(experimentId: number, assignmentId: number, patchAssignmentRequest?: PatchAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchExperimentExperimentIdAssignment(experimentId, assignmentId, patchAssignmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 两种应用场景：学生修改申诉的内容；教师或助教处理申诉
         * @summary 修改互评申诉
         * @param {number} peerAppealId 
         * @param {PatchPeerAppealRequest} [patchPeerAppealRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPeerAppealPeerAppealId(peerAppealId: number, patchPeerAppealRequest?: PatchPeerAppealRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerAppealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPeerAppealPeerAppealId(peerAppealId, patchPeerAppealRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 对虚拟机进行开关机操作
         * @summary 虚拟机开关机
         * @param {string} vmId vm uuid
         * @param {string} action powerOn 表示开机；powerOff 表示关机
         * @param {boolean} [sync] 表示该请求是否同步返回，默认为false，即默认异步。client需要在后续查询具体的执行情况
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVmVmIdPower(vmId: string, action: string, sync?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchVmVmIdPower(vmId, action, sync, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 管理员处理“创建虚拟机的申请”
         * @summary 管理员处理“创建虚拟机的申请”
         * @param {string} applyId 
         * @param {boolean} approve 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVmsApply(applyId: string, approve: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVmApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchVmsApply(applyId, approve, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 修改“虚拟机创建申请”中的虚拟机个数 例如，可以使用此接口为已经审批通过的申请创建添加新的虚拟机，但不可删除
         * @summary 修改“虚拟机创建申请”中的虚拟机情况
         * @param {string} applyId 
         * @param {PatchVmApplyVms} [patchVmApplyVms] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVmsApplyVms(applyId: string, patchVmApplyVms?: PatchVmApplyVms, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVmApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchVmsApplyVms(applyId, patchVmApplyVms, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 保存评阅记录记录
         * @summary 保存评阅作业记录
         * @param {AssignmentReviewRequest} [assignmentReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAssignmentReviews(assignmentReviewRequest?: AssignmentReviewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAssignmentReviews(assignmentReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 创建实验/作业
         * @summary 创建实验/作业
         * @param {CreateExperimentRequest} [createExperimentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExperiment(createExperimentRequest?: CreateExperimentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperimentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postExperiment(createExperimentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 为一项实验正式开启互评
         * @summary 为一项实验正式开启互评
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExperimentEnablePeer(experimentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postExperimentEnablePeer(experimentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 第一次上传作业
         * @summary 创建作业
         * @param {number} experimentId 
         * @param {AssignmentRequest} [assignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExperimentExperimentIdAssignment(experimentId: number, assignmentRequest?: AssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postExperimentExperimentIdAssignment(experimentId, assignmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取需要作为互评标准作业的8份作业，如果没有就创建（助教或教师调用）
         * @summary 获取需要作为互评标准作业的作业
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postExperimentSelectStandardAssignments(experimentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssignmentWithStandardScoreResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postExperimentSelectStandardAssignments(experimentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 上传新文件，或修改旧文件。如果请求体中的fileId为空或为0，那么为创建新文件，或者为修改旧文件
         * @summary 创建或修改文件
         * @param {string} owner 
         * @param {string} fileType 枚举值，可以取值 Assignment
         * @param {number} involvedId 
         * @param {any} [file] 
         * @param {number} [fileId] 可选，如果为空，则表示创建新文件；如果不为空，表示修改旧文件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFile(owner: string, fileType: string, involvedId: number, file?: any, fileId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFile(owner, fileType, involvedId, file, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 触发打包动作
         * @summary 触发打包动作
         * @param {FilePackageRequest} [filePackageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFilePackage(filePackageRequest?: FilePackageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilePackageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFilePackage(filePackageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 在各个PaaS相关后端中创建用户。 该接口是幂等的，可多次重复调用而没有副作用。
         * @summary 在各个PaaS相关后端中创建用户
         * @param {PostPaasUserRequest} [postPaasUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPaasUser(postPaasUserRequest?: PostPaasUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPaasUser(postPaasUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 学生提起申诉
         * @summary 提起申诉
         * @param {CreatePeerAppealRequest} [createPeerAppealRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPeerAppeal(createPeerAppealRequest?: CreatePeerAppealRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerAppealResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPeerAppeal(createPeerAppealRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 为一项作业评分
         * @summary 为一个作业评分
         * @param {CreatePeerAssessmentRequest} [createPeerAssessmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPeerAssessment(createPeerAssessmentRequest?: CreatePeerAssessmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssessmentInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPeerAssessment(createPeerAssessmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 构建镜像。该接口异步返回。
         * @summary 构建镜像
         * @param {string} projectId 
         * @param {PostProjectProjectIdImagesRequest} [postProjectProjectIdImagesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjectProjectIdImages(projectId: string, postProjectProjectIdImagesRequest?: PostProjectProjectIdImagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageBuildTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjectProjectIdImages(projectId, postProjectProjectIdImagesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 添加项目成员 仅支持项目管理员操作
         * @summary 添加项目成员
         * @param {number} projectId 
         * @param {PostProjectProjectIdMembersRequest} [postProjectProjectIdMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjectProjectIdMembers(projectId: number, postProjectProjectIdMembersRequest?: PostProjectProjectIdMembersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjectProjectIdMembers(projectId, postProjectProjectIdMembersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 接口调用者为自己创建一个新项目
         * @summary 创建新项目
         * @param {PostProjectsRequest} [postProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjects(postProjectsRequest?: PostProjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjects(postProjectsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 创建虚拟机模板，本质上是将虚拟机转换为模板  前端应注意，在调用该接口前，应该提示用户先将虚拟机关机，并提示用户，该操作将删除当前虚拟机
         * @summary 创建虚拟机模板
         * @param {PostVmTemplateRequest} [postVmTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postVmTemplate(postVmTemplateRequest?: PostVmTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualMachineTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postVmTemplate(postVmTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 学生、教师为自己申请虚拟机 或教师或助教为实验课程申请虚拟机
         * @summary 创建虚拟机申请
         * @param {CreateVmApplyRequest} [createVmApplyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postVmsApply(createVmApplyRequest?: CreateVmApplyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVmApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postVmsApply(createVmApplyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 教师或助教修改实验/作业信息
         * @summary 修改实验/作业信息
         * @param {number} experimentId 
         * @param {PutExperimentRequest} [putExperimentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putExperimnetExperimentId(experimentId: number, putExperimentRequest?: PutExperimentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperimentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putExperimnetExperimentId(experimentId, putExperimentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 删除某个作业的所有评阅记录
         * @summary 删除某个作业的所有评阅记录
         * @param {number} [assignmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssignmentReviews(assignmentId?: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAssignmentReviews(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除课程资源
         * @summary 删除课程资源
         * @param {number} courseId 
         * @param {number} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourseCourseIdResourceResourceId(courseId: number, resourceId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCourseCourseIdResourceResourceId(courseId, resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 批量删除课程资源
         * @summary 批量删除课程资源
         * @param {number} courseId 
         * @param {DeleteCourseResourcesRequest} [deleteCourseResourcesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourseCourseIdResources(courseId: number, deleteCourseResourcesRequest?: DeleteCourseResourcesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCourseCourseIdResources(courseId, deleteCourseResourcesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除一项互评申诉（学生主动撤销）
         * @summary 删除一项互评申诉
         * @param {number} peerAppealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeerAppealPeerAppealId(peerAppealId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePeerAppealPeerAppealId(peerAppealId, options).then((request) => request(axios, basePath));
        },
        /**
         * 从项目中移除成员
         * @summary 从项目中移除成员
         * @param {number} projectId 
         * @param {DeleteProjectProjectIdMembersRequest} [deleteProjectProjectIdMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectProjectIdMembers(projectId: number, deleteProjectProjectIdMembersRequest?: DeleteProjectProjectIdMembersRequest, options?: any): AxiosPromise<ProjectMember> {
            return localVarFp.deleteProjectProjectIdMembers(projectId, deleteProjectProjectIdMembersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除“虚拟机创建申请”中的虚拟机
         * @summary 删除“虚拟机创建申请”中的虚拟机
         * @param {string} applyId 
         * @param {DeleteVmApplyVms} [deleteVmApplyVms] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVmsApplyApplyIdVms(applyId: string, deleteVmApplyVms?: DeleteVmApplyVms, options?: any): AxiosPromise<CreateVmApplyResponse> {
            return localVarFp.deleteVmsApplyApplyIdVms(applyId, deleteVmApplyVms, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取一项作业的评阅记录
         * @summary 获取一项作业的评阅记录
         * @param {number} [assignmentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentReviews(assignmentId?: number, options?: any): AxiosPromise<Array<AssignmentReviewResponse>> {
            return localVarFp.getAssignmentReviews(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 校验token
         * @summary 校验token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthentications(options?: any): AxiosPromise<Array<Authentication>> {
            return localVarFp.getAuthentications(options).then((request) => request(axios, basePath));
        },
        /**
         * 获取课程信息
         * @summary 获取课程信息
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseCourseId(courseId: string, options?: any): AxiosPromise<CourseResponse> {
            return localVarFp.getCourseCourseId(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取课程所属的所有课程资源
         * @summary 获取课程所属的所有课程资源
         * @param {number} courseId 
         * @param {string} [type] 表示获取的课程资源类型，如果该值为空，则表示两种资源都获取。CourseResource, ExperimentResource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseCourseIdResource(courseId: number, type?: string, options?: any): AxiosPromise<Array<CourseResourceResponse>> {
            return localVarFp.getCourseCourseIdResource(courseId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取实验（作业）下学生提交的作业信息  如果是当前课程的教师或助教调用，则返回当前实验的全部作业  否则，仅返回当前学生的作业
         * @summary 获取实验（作业）下学生提交的作业信息
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentExperimentIdAssignment(experimentId: number, options?: any): AxiosPromise<AssignmentListResponse> {
            return localVarFp.getExperimentExperimentIdAssignment(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 查看某次作业的详细信息
         * @summary 查看作业
         * @param {number} experimentId 
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentExperimentIdAssignmentAssignmentId(experimentId: number, assignmentId: number, options?: any): AxiosPromise<AssignmentResponse> {
            return localVarFp.getExperimentExperimentIdAssignmentAssignmentId(experimentId, assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取实验名称列表
         * @summary 获取实验名称列表
         * @param {number} [courseId] 指定课程
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentsNames(courseId?: number, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getExperimentsNames(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取一项实验（作业）详情
         * @summary 获取一项实验（作业）
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimnetExperimentId(experimentId: number, options?: any): AxiosPromise<ExperimentResponse> {
            return localVarFp.getExperimnetExperimentId(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 学生获取属于自己的实验信息列表
         * @summary 获取实验信息列表
         * @param {number} [termId] 学期序号。该值缺失，或小于等于0时，将默认获取最新学期的信息
         * @param {boolean} [submitted] 当为true时，表示获取已完成的实验列表；为false时，表示获取未完成的实验列表；缺失时，表示同时获取已完成和未完成的实验列表。
         * @param {number} [courseId] 当为空或不合法时，获取所有符合上述条件的课程的实验列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpriments(termId?: number, submitted?: boolean, courseId?: number, options?: any): AxiosPromise<Array<ExperimentResponse>> {
            return localVarFp.getExpriments(termId, submitted, courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取文件的元信息
         * @summary 获取文件元信息
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileFileId(fileId: number, options?: any): AxiosPromise<FileResponse> {
            return localVarFp.getFileFileId(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 下载文件 文件的一些元信息（名称、format-type）等展示在相应的header中  该接口的response是一个二进制字节流，即为文件的内容
         * @summary 下载文件
         * @param {number} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileFileIdContent(fileId: number, options?: any): AxiosPromise<void> {
            return localVarFp.getFileFileIdContent(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 打包下载文件，如下载当前实验的全部作业，或下载当前课程的全部资源
         * @summary 下载打包好的zip
         * @param {string} packageId 
         * @param {string} packageName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilePackage(packageId: string, packageName: string, options?: any): AxiosPromise<object> {
            return localVarFp.getFilePackage(packageId, packageName, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取文件打包的结果
         * @summary 查询文件打包的结果
         * @param {string} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilePackageResult(packageId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getFilePackageResult(packageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 查看一项互评申诉
         * @summary 查看一项互评申诉
         * @param {number} peerAppealId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeerAppealPeerAppealId(peerAppealId: number, options?: any): AxiosPromise<PeerAppealResponse> {
            return localVarFp.getPeerAppealPeerAppealId(peerAppealId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取互评申诉列表
         * @summary 获取互评申诉列表
         * @param {number} expId 
         * @param {number} [studentId] 如果调用者为学生，那么即使设置了该字段，也会被忽略
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeerAppeals(expId: number, studentId?: number, options?: any): AxiosPromise<Array<PeerAppealResponse>> {
            return localVarFp.getPeerAppeals(expId, studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取某个作业的互评信息
         * @summary 获取某个作业的互评信息
         * @param {number} assignmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeerAssessment(assignmentId: number, options?: any): AxiosPromise<AssignmentPeerAssessmentResultResponse> {
            return localVarFp.getPeerAssessment(assignmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 学生获取属于自己的互评任务
         * @summary 获取属于自己的互评任务
         * @param {number} expId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeerTasks(expId: number, options?: any): AxiosPromise<Array<StudentPeerTaskResponse>> {
            return localVarFp.getPeerTasks(expId, options).then((request) => request(axios, basePath));
        },
        /**
         * 查看某一项目详情
         * @summary 查看某一项目详情
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectId(projectId: number, options?: any): AxiosPromise<Project> {
            return localVarFp.getProjectProjectId(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前项目下的所有镜像构建任务
         * @summary 获取镜像构建任务
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectIdImageBuildTasks(projectId: string, options?: any): AxiosPromise<Array<ImageBuildTask>> {
            return localVarFp.getProjectProjectIdImageBuildTasks(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前项目下的所有Harbor镜像仓库
         * @summary 获取Harbor镜像仓库
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectIdImageRepos(projectId: string, options?: any): AxiosPromise<Array<ImageRepo>> {
            return localVarFp.getProjectProjectIdImageRepos(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前项目中的所有可用镜像
         * @summary 获取项目中的镜像列表
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectIdImages(projectId: string, options?: any): AxiosPromise<Array<Image>> {
            return localVarFp.getProjectProjectIdImages(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取项目中的所有成员
         * @summary 获取项目中的所有成员
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectIdMembers(projectId: number, options?: any): AxiosPromise<Array<ProjectMember>> {
            return localVarFp.getProjectProjectIdMembers(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取项目列表
         * @summary 获取项目列表
         * @param {number} [expId] 如果该值为空，则默认返回该用户创建或参与的所有项目
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(expId?: number, options?: any): AxiosPromise<Array<SimpleProject>> {
            return localVarFp.getProjects(expId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取课程中所有实验的统计信息，本课程的助教或教师调用
         * @summary 获取课程中所有实验的统计信息
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatCourseCourseIdExperiments(courseId: number, options?: any): AxiosPromise<StatCourseExpsResponse> {
            return localVarFp.getStatCourseCourseIdExperiments(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取课程中所有实验的统计信息，本课程的助教或教师调用
         * @summary 获取课程中所有实验的统计信息
         * @param {number} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatCourseCourseIdExperiments_1(courseId: number, options?: any): AxiosPromise<StatCourseExpsResponse> {
            return localVarFp.getStatCourseCourseIdExperiments_1(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 统计某门实验的提交作业的情况（该课程的助教或教师调用）
         * @summary 统计某门实验的提交作业的情况
         * @param {number} expId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatExpExpIdAssignment(expId: number, options?: any): AxiosPromise<StatExpAssignmentResponse> {
            return localVarFp.getStatExpExpIdAssignment(expId, options).then((request) => request(axios, basePath));
        },
        /**
         * 统计某门实验的提交作业的情况（该课程的助教或教师调用）
         * @summary 统计某门实验的提交作业的情况
         * @param {number} expId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatExpExpIdAssignment_2(expId: number, options?: any): AxiosPromise<StatExpAssignmentResponse> {
            return localVarFp.getStatExpExpIdAssignment_2(expId, options).then((request) => request(axios, basePath));
        },
        /**
         * 查看“创建虚拟机的申请”
         * @summary 查看“创建虚拟机的申请”
         * @param {string} applyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVmApply(applyId: string, options?: any): AxiosPromise<Array<CreateVmApplyResponse>> {
            return localVarFp.getVmApply(applyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前可用的所有虚拟机模板 返回的是一个数组  该接口已被启用，请使用 GET /vm/templates
         * @summary 获取当前可用的所有虚拟机模板
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getVmTemplate(options?: any): AxiosPromise<Array<VirtualMachine>> {
            return localVarFp.getVmTemplate(options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前可用的所有虚拟机模板 返回的是一个数组  逻辑是： 1. 如果是管理员，返回所有的虚拟机模板 2. 如果是教师，返回所有公共模板、该教师自己制作的所有模板、该教师的助教制作的所有模板 3. 如果是学生，   a. 如果是助教，返回所有公共模板、该学生自己制作的所有模板、助教所属课程的教师制作的所有模板   b. 如果不是助教，返回所有公共模板、该学生自己制作的所有模板  前端在使用该接口时，可以考虑在具体场景中，对获取到的列表做进一步的过滤
         * @summary 获取当前用户可用的所有虚拟机模板
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVmTemplates(options?: any): AxiosPromise<Array<VirtualMachineTemplate>> {
            return localVarFp.getVmTemplates(options).then((request) => request(axios, basePath));
        },
        /**
         * 根据UUID获取虚拟机信息
         * @summary get vm by uuid
         * @param {string} vmId vm uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVmVmId(vmId: string, options?: any): AxiosPromise<VirtualMachine> {
            return localVarFp.getVmVmId(vmId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取符合条件的所有虚拟机
         * @summary get Virtual Machine list
         * @param {string} [studentId] 
         * @param {string} [teacherId] 
         * @param {number} [experimentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVms(studentId?: string, teacherId?: string, experimentId?: number, options?: any): AxiosPromise<Array<VirtualMachine>> {
            return localVarFp.getVms(studentId, teacherId, experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 用户查看所有与自己有关的创建虚拟机的申请 ！！！注意，该接口返回的是一个数组！！！
         * @summary 查看“创建虚拟机的申请”
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVmsApply(options?: any): AxiosPromise<Array<CreateVmApplyResponse>> {
            return localVarFp.getVmsApply(options).then((request) => request(axios, basePath));
        },
        /**
         * 重复上传作业，直接覆盖之前的作业
         * @summary 修改作业
         * @param {number} experimentId 
         * @param {number} assignmentId 
         * @param {PatchAssignmentRequest} [patchAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchExperimentExperimentIdAssignment(experimentId: number, assignmentId: number, patchAssignmentRequest?: PatchAssignmentRequest, options?: any): AxiosPromise<AssignmentResponse> {
            return localVarFp.patchExperimentExperimentIdAssignment(experimentId, assignmentId, patchAssignmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 两种应用场景：学生修改申诉的内容；教师或助教处理申诉
         * @summary 修改互评申诉
         * @param {number} peerAppealId 
         * @param {PatchPeerAppealRequest} [patchPeerAppealRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPeerAppealPeerAppealId(peerAppealId: number, patchPeerAppealRequest?: PatchPeerAppealRequest, options?: any): AxiosPromise<PeerAppealResponse> {
            return localVarFp.patchPeerAppealPeerAppealId(peerAppealId, patchPeerAppealRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 对虚拟机进行开关机操作
         * @summary 虚拟机开关机
         * @param {string} vmId vm uuid
         * @param {string} action powerOn 表示开机；powerOff 表示关机
         * @param {boolean} [sync] 表示该请求是否同步返回，默认为false，即默认异步。client需要在后续查询具体的执行情况
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVmVmIdPower(vmId: string, action: string, sync?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.patchVmVmIdPower(vmId, action, sync, options).then((request) => request(axios, basePath));
        },
        /**
         * 管理员处理“创建虚拟机的申请”
         * @summary 管理员处理“创建虚拟机的申请”
         * @param {string} applyId 
         * @param {boolean} approve 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVmsApply(applyId: string, approve: boolean, options?: any): AxiosPromise<CreateVmApplyResponse> {
            return localVarFp.patchVmsApply(applyId, approve, options).then((request) => request(axios, basePath));
        },
        /**
         * 修改“虚拟机创建申请”中的虚拟机个数 例如，可以使用此接口为已经审批通过的申请创建添加新的虚拟机，但不可删除
         * @summary 修改“虚拟机创建申请”中的虚拟机情况
         * @param {string} applyId 
         * @param {PatchVmApplyVms} [patchVmApplyVms] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVmsApplyVms(applyId: string, patchVmApplyVms?: PatchVmApplyVms, options?: any): AxiosPromise<CreateVmApplyResponse> {
            return localVarFp.patchVmsApplyVms(applyId, patchVmApplyVms, options).then((request) => request(axios, basePath));
        },
        /**
         * 保存评阅记录记录
         * @summary 保存评阅作业记录
         * @param {AssignmentReviewRequest} [assignmentReviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssignmentReviews(assignmentReviewRequest?: AssignmentReviewRequest, options?: any): AxiosPromise<AssignmentReviewResponse> {
            return localVarFp.postAssignmentReviews(assignmentReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建实验/作业
         * @summary 创建实验/作业
         * @param {CreateExperimentRequest} [createExperimentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExperiment(createExperimentRequest?: CreateExperimentRequest, options?: any): AxiosPromise<ExperimentResponse> {
            return localVarFp.postExperiment(createExperimentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 为一项实验正式开启互评
         * @summary 为一项实验正式开启互评
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExperimentEnablePeer(experimentId: number, options?: any): AxiosPromise<void> {
            return localVarFp.postExperimentEnablePeer(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 第一次上传作业
         * @summary 创建作业
         * @param {number} experimentId 
         * @param {AssignmentRequest} [assignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExperimentExperimentIdAssignment(experimentId: number, assignmentRequest?: AssignmentRequest, options?: any): AxiosPromise<AssignmentResponse> {
            return localVarFp.postExperimentExperimentIdAssignment(experimentId, assignmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取需要作为互评标准作业的8份作业，如果没有就创建（助教或教师调用）
         * @summary 获取需要作为互评标准作业的作业
         * @param {number} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postExperimentSelectStandardAssignments(experimentId: number, options?: any): AxiosPromise<Array<AssignmentWithStandardScoreResponse>> {
            return localVarFp.postExperimentSelectStandardAssignments(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 上传新文件，或修改旧文件。如果请求体中的fileId为空或为0，那么为创建新文件，或者为修改旧文件
         * @summary 创建或修改文件
         * @param {string} owner 
         * @param {string} fileType 枚举值，可以取值 Assignment
         * @param {number} involvedId 
         * @param {any} [file] 
         * @param {number} [fileId] 可选，如果为空，则表示创建新文件；如果不为空，表示修改旧文件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFile(owner: string, fileType: string, involvedId: number, file?: any, fileId?: number, options?: any): AxiosPromise<UploadFileResponse> {
            return localVarFp.postFile(owner, fileType, involvedId, file, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 触发打包动作
         * @summary 触发打包动作
         * @param {FilePackageRequest} [filePackageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFilePackage(filePackageRequest?: FilePackageRequest, options?: any): AxiosPromise<FilePackageResponse> {
            return localVarFp.postFilePackage(filePackageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 在各个PaaS相关后端中创建用户。 该接口是幂等的，可多次重复调用而没有副作用。
         * @summary 在各个PaaS相关后端中创建用户
         * @param {PostPaasUserRequest} [postPaasUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaasUser(postPaasUserRequest?: PostPaasUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postPaasUser(postPaasUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 学生提起申诉
         * @summary 提起申诉
         * @param {CreatePeerAppealRequest} [createPeerAppealRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPeerAppeal(createPeerAppealRequest?: CreatePeerAppealRequest, options?: any): AxiosPromise<PeerAppealResponse> {
            return localVarFp.postPeerAppeal(createPeerAppealRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 为一项作业评分
         * @summary 为一个作业评分
         * @param {CreatePeerAssessmentRequest} [createPeerAssessmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPeerAssessment(createPeerAssessmentRequest?: CreatePeerAssessmentRequest, options?: any): AxiosPromise<AssessmentInfoResponse> {
            return localVarFp.postPeerAssessment(createPeerAssessmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 构建镜像。该接口异步返回。
         * @summary 构建镜像
         * @param {string} projectId 
         * @param {PostProjectProjectIdImagesRequest} [postProjectProjectIdImagesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectProjectIdImages(projectId: string, postProjectProjectIdImagesRequest?: PostProjectProjectIdImagesRequest, options?: any): AxiosPromise<ImageBuildTask> {
            return localVarFp.postProjectProjectIdImages(projectId, postProjectProjectIdImagesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 添加项目成员 仅支持项目管理员操作
         * @summary 添加项目成员
         * @param {number} projectId 
         * @param {PostProjectProjectIdMembersRequest} [postProjectProjectIdMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectProjectIdMembers(projectId: number, postProjectProjectIdMembersRequest?: PostProjectProjectIdMembersRequest, options?: any): AxiosPromise<ProjectMember> {
            return localVarFp.postProjectProjectIdMembers(projectId, postProjectProjectIdMembersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 接口调用者为自己创建一个新项目
         * @summary 创建新项目
         * @param {PostProjectsRequest} [postProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjects(postProjectsRequest?: PostProjectsRequest, options?: any): AxiosPromise<Project> {
            return localVarFp.postProjects(postProjectsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建虚拟机模板，本质上是将虚拟机转换为模板  前端应注意，在调用该接口前，应该提示用户先将虚拟机关机，并提示用户，该操作将删除当前虚拟机
         * @summary 创建虚拟机模板
         * @param {PostVmTemplateRequest} [postVmTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVmTemplate(postVmTemplateRequest?: PostVmTemplateRequest, options?: any): AxiosPromise<VirtualMachineTemplate> {
            return localVarFp.postVmTemplate(postVmTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 学生、教师为自己申请虚拟机 或教师或助教为实验课程申请虚拟机
         * @summary 创建虚拟机申请
         * @param {CreateVmApplyRequest} [createVmApplyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVmsApply(createVmApplyRequest?: CreateVmApplyRequest, options?: any): AxiosPromise<CreateVmApplyResponse> {
            return localVarFp.postVmsApply(createVmApplyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 教师或助教修改实验/作业信息
         * @summary 修改实验/作业信息
         * @param {number} experimentId 
         * @param {PutExperimentRequest} [putExperimentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putExperimnetExperimentId(experimentId: number, putExperimentRequest?: PutExperimentRequest, options?: any): AxiosPromise<ExperimentResponse> {
            return localVarFp.putExperimnetExperimentId(experimentId, putExperimentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 删除某个作业的所有评阅记录
     * @summary 删除某个作业的所有评阅记录
     * @param {number} [assignmentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAssignmentReviews(assignmentId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAssignmentReviews(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除课程资源
     * @summary 删除课程资源
     * @param {number} courseId 
     * @param {number} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCourseCourseIdResourceResourceId(courseId: number, resourceId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCourseCourseIdResourceResourceId(courseId, resourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 批量删除课程资源
     * @summary 批量删除课程资源
     * @param {number} courseId 
     * @param {DeleteCourseResourcesRequest} [deleteCourseResourcesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCourseCourseIdResources(courseId: number, deleteCourseResourcesRequest?: DeleteCourseResourcesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCourseCourseIdResources(courseId, deleteCourseResourcesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除一项互评申诉（学生主动撤销）
     * @summary 删除一项互评申诉
     * @param {number} peerAppealId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePeerAppealPeerAppealId(peerAppealId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePeerAppealPeerAppealId(peerAppealId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 从项目中移除成员
     * @summary 从项目中移除成员
     * @param {number} projectId 
     * @param {DeleteProjectProjectIdMembersRequest} [deleteProjectProjectIdMembersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProjectProjectIdMembers(projectId: number, deleteProjectProjectIdMembersRequest?: DeleteProjectProjectIdMembersRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProjectProjectIdMembers(projectId, deleteProjectProjectIdMembersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除“虚拟机创建申请”中的虚拟机
     * @summary 删除“虚拟机创建申请”中的虚拟机
     * @param {string} applyId 
     * @param {DeleteVmApplyVms} [deleteVmApplyVms] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteVmsApplyApplyIdVms(applyId: string, deleteVmApplyVms?: DeleteVmApplyVms, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteVmsApplyApplyIdVms(applyId, deleteVmApplyVms, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取一项作业的评阅记录
     * @summary 获取一项作业的评阅记录
     * @param {number} [assignmentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAssignmentReviews(assignmentId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAssignmentReviews(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 校验token
     * @summary 校验token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAuthentications(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAuthentications(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取课程信息
     * @summary 获取课程信息
     * @param {string} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCourseCourseId(courseId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCourseCourseId(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取课程所属的所有课程资源
     * @summary 获取课程所属的所有课程资源
     * @param {number} courseId 
     * @param {string} [type] 表示获取的课程资源类型，如果该值为空，则表示两种资源都获取。CourseResource, ExperimentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCourseCourseIdResource(courseId: number, type?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCourseCourseIdResource(courseId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取实验（作业）下学生提交的作业信息  如果是当前课程的教师或助教调用，则返回当前实验的全部作业  否则，仅返回当前学生的作业
     * @summary 获取实验（作业）下学生提交的作业信息
     * @param {number} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExperimentExperimentIdAssignment(experimentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExperimentExperimentIdAssignment(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查看某次作业的详细信息
     * @summary 查看作业
     * @param {number} experimentId 
     * @param {number} assignmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExperimentExperimentIdAssignmentAssignmentId(experimentId: number, assignmentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExperimentExperimentIdAssignmentAssignmentId(experimentId, assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取实验名称列表
     * @summary 获取实验名称列表
     * @param {number} [courseId] 指定课程
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExperimentsNames(courseId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExperimentsNames(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取一项实验（作业）详情
     * @summary 获取一项实验（作业）
     * @param {number} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExperimnetExperimentId(experimentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExperimnetExperimentId(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 学生获取属于自己的实验信息列表
     * @summary 获取实验信息列表
     * @param {number} [termId] 学期序号。该值缺失，或小于等于0时，将默认获取最新学期的信息
     * @param {boolean} [submitted] 当为true时，表示获取已完成的实验列表；为false时，表示获取未完成的实验列表；缺失时，表示同时获取已完成和未完成的实验列表。
     * @param {number} [courseId] 当为空或不合法时，获取所有符合上述条件的课程的实验列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExpriments(termId?: number, submitted?: boolean, courseId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExpriments(termId, submitted, courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取文件的元信息
     * @summary 获取文件元信息
     * @param {number} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFileFileId(fileId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFileFileId(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 下载文件 文件的一些元信息（名称、format-type）等展示在相应的header中  该接口的response是一个二进制字节流，即为文件的内容
     * @summary 下载文件
     * @param {number} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFileFileIdContent(fileId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFileFileIdContent(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 打包下载文件，如下载当前实验的全部作业，或下载当前课程的全部资源
     * @summary 下载打包好的zip
     * @param {string} packageId 
     * @param {string} packageName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFilePackage(packageId: string, packageName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFilePackage(packageId, packageName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取文件打包的结果
     * @summary 查询文件打包的结果
     * @param {string} packageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFilePackageResult(packageId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFilePackageResult(packageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查看一项互评申诉
     * @summary 查看一项互评申诉
     * @param {number} peerAppealId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPeerAppealPeerAppealId(peerAppealId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPeerAppealPeerAppealId(peerAppealId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取互评申诉列表
     * @summary 获取互评申诉列表
     * @param {number} expId 
     * @param {number} [studentId] 如果调用者为学生，那么即使设置了该字段，也会被忽略
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPeerAppeals(expId: number, studentId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPeerAppeals(expId, studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取某个作业的互评信息
     * @summary 获取某个作业的互评信息
     * @param {number} assignmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPeerAssessment(assignmentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPeerAssessment(assignmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 学生获取属于自己的互评任务
     * @summary 获取属于自己的互评任务
     * @param {number} expId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPeerTasks(expId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPeerTasks(expId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查看某一项目详情
     * @summary 查看某一项目详情
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectProjectId(projectId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectProjectId(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前项目下的所有镜像构建任务
     * @summary 获取镜像构建任务
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectProjectIdImageBuildTasks(projectId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectProjectIdImageBuildTasks(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前项目下的所有Harbor镜像仓库
     * @summary 获取Harbor镜像仓库
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectProjectIdImageRepos(projectId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectProjectIdImageRepos(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前项目中的所有可用镜像
     * @summary 获取项目中的镜像列表
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectProjectIdImages(projectId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectProjectIdImages(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取项目中的所有成员
     * @summary 获取项目中的所有成员
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectProjectIdMembers(projectId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectProjectIdMembers(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取项目列表
     * @summary 获取项目列表
     * @param {number} [expId] 如果该值为空，则默认返回该用户创建或参与的所有项目
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjects(expId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjects(expId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取课程中所有实验的统计信息，本课程的助教或教师调用
     * @summary 获取课程中所有实验的统计信息
     * @param {number} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStatCourseCourseIdExperiments(courseId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStatCourseCourseIdExperiments(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取课程中所有实验的统计信息，本课程的助教或教师调用
     * @summary 获取课程中所有实验的统计信息
     * @param {number} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStatCourseCourseIdExperiments_1(courseId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStatCourseCourseIdExperiments_1(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 统计某门实验的提交作业的情况（该课程的助教或教师调用）
     * @summary 统计某门实验的提交作业的情况
     * @param {number} expId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStatExpExpIdAssignment(expId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStatExpExpIdAssignment(expId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 统计某门实验的提交作业的情况（该课程的助教或教师调用）
     * @summary 统计某门实验的提交作业的情况
     * @param {number} expId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStatExpExpIdAssignment_2(expId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStatExpExpIdAssignment_2(expId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查看“创建虚拟机的申请”
     * @summary 查看“创建虚拟机的申请”
     * @param {string} applyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVmApply(applyId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVmApply(applyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前可用的所有虚拟机模板 返回的是一个数组  该接口已被启用，请使用 GET /vm/templates
     * @summary 获取当前可用的所有虚拟机模板
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVmTemplate(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVmTemplate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前可用的所有虚拟机模板 返回的是一个数组  逻辑是： 1. 如果是管理员，返回所有的虚拟机模板 2. 如果是教师，返回所有公共模板、该教师自己制作的所有模板、该教师的助教制作的所有模板 3. 如果是学生，   a. 如果是助教，返回所有公共模板、该学生自己制作的所有模板、助教所属课程的教师制作的所有模板   b. 如果不是助教，返回所有公共模板、该学生自己制作的所有模板  前端在使用该接口时，可以考虑在具体场景中，对获取到的列表做进一步的过滤
     * @summary 获取当前用户可用的所有虚拟机模板
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVmTemplates(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVmTemplates(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据UUID获取虚拟机信息
     * @summary get vm by uuid
     * @param {string} vmId vm uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVmVmId(vmId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVmVmId(vmId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取符合条件的所有虚拟机
     * @summary get Virtual Machine list
     * @param {string} [studentId] 
     * @param {string} [teacherId] 
     * @param {number} [experimentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVms(studentId?: string, teacherId?: string, experimentId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVms(studentId, teacherId, experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 用户查看所有与自己有关的创建虚拟机的申请 ！！！注意，该接口返回的是一个数组！！！
     * @summary 查看“创建虚拟机的申请”
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVmsApply(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVmsApply(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 重复上传作业，直接覆盖之前的作业
     * @summary 修改作业
     * @param {number} experimentId 
     * @param {number} assignmentId 
     * @param {PatchAssignmentRequest} [patchAssignmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchExperimentExperimentIdAssignment(experimentId: number, assignmentId: number, patchAssignmentRequest?: PatchAssignmentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchExperimentExperimentIdAssignment(experimentId, assignmentId, patchAssignmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 两种应用场景：学生修改申诉的内容；教师或助教处理申诉
     * @summary 修改互评申诉
     * @param {number} peerAppealId 
     * @param {PatchPeerAppealRequest} [patchPeerAppealRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchPeerAppealPeerAppealId(peerAppealId: number, patchPeerAppealRequest?: PatchPeerAppealRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchPeerAppealPeerAppealId(peerAppealId, patchPeerAppealRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 对虚拟机进行开关机操作
     * @summary 虚拟机开关机
     * @param {string} vmId vm uuid
     * @param {string} action powerOn 表示开机；powerOff 表示关机
     * @param {boolean} [sync] 表示该请求是否同步返回，默认为false，即默认异步。client需要在后续查询具体的执行情况
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchVmVmIdPower(vmId: string, action: string, sync?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchVmVmIdPower(vmId, action, sync, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理员处理“创建虚拟机的申请”
     * @summary 管理员处理“创建虚拟机的申请”
     * @param {string} applyId 
     * @param {boolean} approve 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchVmsApply(applyId: string, approve: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchVmsApply(applyId, approve, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 修改“虚拟机创建申请”中的虚拟机个数 例如，可以使用此接口为已经审批通过的申请创建添加新的虚拟机，但不可删除
     * @summary 修改“虚拟机创建申请”中的虚拟机情况
     * @param {string} applyId 
     * @param {PatchVmApplyVms} [patchVmApplyVms] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchVmsApplyVms(applyId: string, patchVmApplyVms?: PatchVmApplyVms, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchVmsApplyVms(applyId, patchVmApplyVms, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 保存评阅记录记录
     * @summary 保存评阅作业记录
     * @param {AssignmentReviewRequest} [assignmentReviewRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAssignmentReviews(assignmentReviewRequest?: AssignmentReviewRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAssignmentReviews(assignmentReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 创建实验/作业
     * @summary 创建实验/作业
     * @param {CreateExperimentRequest} [createExperimentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postExperiment(createExperimentRequest?: CreateExperimentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postExperiment(createExperimentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为一项实验正式开启互评
     * @summary 为一项实验正式开启互评
     * @param {number} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postExperimentEnablePeer(experimentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postExperimentEnablePeer(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 第一次上传作业
     * @summary 创建作业
     * @param {number} experimentId 
     * @param {AssignmentRequest} [assignmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postExperimentExperimentIdAssignment(experimentId: number, assignmentRequest?: AssignmentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postExperimentExperimentIdAssignment(experimentId, assignmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取需要作为互评标准作业的8份作业，如果没有就创建（助教或教师调用）
     * @summary 获取需要作为互评标准作业的作业
     * @param {number} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postExperimentSelectStandardAssignments(experimentId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postExperimentSelectStandardAssignments(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 上传新文件，或修改旧文件。如果请求体中的fileId为空或为0，那么为创建新文件，或者为修改旧文件
     * @summary 创建或修改文件
     * @param {string} owner 
     * @param {string} fileType 枚举值，可以取值 Assignment
     * @param {number} involvedId 
     * @param {any} [file] 
     * @param {number} [fileId] 可选，如果为空，则表示创建新文件；如果不为空，表示修改旧文件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postFile(owner: string, fileType: string, involvedId: number, file?: any, fileId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postFile(owner, fileType, involvedId, file, fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 触发打包动作
     * @summary 触发打包动作
     * @param {FilePackageRequest} [filePackageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postFilePackage(filePackageRequest?: FilePackageRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postFilePackage(filePackageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 在各个PaaS相关后端中创建用户。 该接口是幂等的，可多次重复调用而没有副作用。
     * @summary 在各个PaaS相关后端中创建用户
     * @param {PostPaasUserRequest} [postPaasUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postPaasUser(postPaasUserRequest?: PostPaasUserRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postPaasUser(postPaasUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 学生提起申诉
     * @summary 提起申诉
     * @param {CreatePeerAppealRequest} [createPeerAppealRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postPeerAppeal(createPeerAppealRequest?: CreatePeerAppealRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postPeerAppeal(createPeerAppealRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为一项作业评分
     * @summary 为一个作业评分
     * @param {CreatePeerAssessmentRequest} [createPeerAssessmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postPeerAssessment(createPeerAssessmentRequest?: CreatePeerAssessmentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postPeerAssessment(createPeerAssessmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 构建镜像。该接口异步返回。
     * @summary 构建镜像
     * @param {string} projectId 
     * @param {PostProjectProjectIdImagesRequest} [postProjectProjectIdImagesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postProjectProjectIdImages(projectId: string, postProjectProjectIdImagesRequest?: PostProjectProjectIdImagesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postProjectProjectIdImages(projectId, postProjectProjectIdImagesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 添加项目成员 仅支持项目管理员操作
     * @summary 添加项目成员
     * @param {number} projectId 
     * @param {PostProjectProjectIdMembersRequest} [postProjectProjectIdMembersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postProjectProjectIdMembers(projectId: number, postProjectProjectIdMembersRequest?: PostProjectProjectIdMembersRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postProjectProjectIdMembers(projectId, postProjectProjectIdMembersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 接口调用者为自己创建一个新项目
     * @summary 创建新项目
     * @param {PostProjectsRequest} [postProjectsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postProjects(postProjectsRequest?: PostProjectsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postProjects(postProjectsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 创建虚拟机模板，本质上是将虚拟机转换为模板  前端应注意，在调用该接口前，应该提示用户先将虚拟机关机，并提示用户，该操作将删除当前虚拟机
     * @summary 创建虚拟机模板
     * @param {PostVmTemplateRequest} [postVmTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postVmTemplate(postVmTemplateRequest?: PostVmTemplateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postVmTemplate(postVmTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 学生、教师为自己申请虚拟机 或教师或助教为实验课程申请虚拟机
     * @summary 创建虚拟机申请
     * @param {CreateVmApplyRequest} [createVmApplyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postVmsApply(createVmApplyRequest?: CreateVmApplyRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postVmsApply(createVmApplyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 教师或助教修改实验/作业信息
     * @summary 修改实验/作业信息
     * @param {number} experimentId 
     * @param {PutExperimentRequest} [putExperimentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putExperimnetExperimentId(experimentId: number, putExperimentRequest?: PutExperimentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putExperimnetExperimentId(experimentId, putExperimentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


